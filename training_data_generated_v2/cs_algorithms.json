[{"inputs": "Compute the factorial of a given non-negative integer.\n\nInteger: 6\nFactorial:", "targets": ["720"], "multiple_choice_targets": ["1", "6", "24", "120", "720", "1440"]}, {"inputs": "Determine whether the given graph is bipartite.\n\nGraph: {0: [1, 3], 1: [0, 2], 2: [1, 3], 3: [0, 2]}\nBipartite/Not bipartite?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a list of integers, find the maximum subarray sum.\n\nList: [2, -1, 3, -4, 2, 1, -5, 4]\nMaximum subarray sum:", "targets": ["5"], "multiple_choice_targets": ["-7", "-4", "0", "2", "3", "4", "5", "6"]}, {"inputs": "Determine whether the given sequence of parentheses is properly matched.\n\nSequence: { [ } ( ) }\nValid/Invalid?", "targets": ["Invalid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Given two strings, determine if one is a permutation of the other.\n\nStrings: abcdefg gfedcba\nPermutation/Not permutation?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Compute the greatest common divisor of two positive integers.\n\nIntegers: 24, 60\nGreatest common divisor:", "targets": ["12"], "multiple_choice_targets": ["1", "2", "3", "4", "6", "8", "12", "24", "30", "60"]}, {"inputs": "Given an array of integers, return the maximum sum subarray.\n\nArray: [1, -2, 3, 4, -5, 8]\nMaximum sum subarray:", "targets": ["10"], "multiple_choice_targets": ["-2", "-1", "3", "4", "6", "7", "8", "9", "10", "12"]}, {"inputs": "Given an array of integers, return the maximum sum subarray.\n\nArray: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nMaximum sum subarray:", "targets": ["6"], "multiple_choice_targets": ["-7", "-3", "-2", "1", "3", "4", "6", "7", "8", "9"]}, {"inputs": "Determine whether the given string is a palindrome.\n\nString: racecar\nPalindrome?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Determine whether the given string is a palindrome.\n\nString: hello\nPalindrome?", "targets": ["False"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given an array of integers, remove all duplicates in the array.\n\nArray: [1, 2, 2, 3, 4, 4, 4, 5]\nArray after removing duplicates:", "targets": ["[1, 2, 3, 4, 5]"], "multiple_choice_targets": ["[1, 2, 2, 3, 4, 4, 4, 5]", "[1, 2, 3, 4, 4, 4, 5]", "[1, 2, 2, 3, 4, 4, 5]", "[1, 2, 2, 3, 4, 5]", "[1, 2, 3, 4, 4, 5]"]}, {"inputs": "Given an array of integers, remove all duplicates in the array.\n\nArray: [5, 7, 3, 9, 2, 5, 6, 7]\nArray after removing duplicates:", "targets": ["[5, 7, 3, 9, 2, 6]"], "multiple_choice_targets": ["[5, 7, 3, 9, 2, 5, 6]", "[5, 7, 3, 9, 2, 6, 7]", "[5, 7, 3, 9, 2, 5, 6, 7]", "[5, 7, 3, 9, 2, 6]"]}, {"inputs": "Given a binary tree, find its maximum depth.\n\nTree:\n   3\n  / \\\n 9  20\n    /  \\\n   15   7\nMaximum depth:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Given two strings, determine if they are anagrams of each other.\n\nStrings: listen silent\nAnagrams/Not Anagrams?", "targets": ["Anagrams"], "multiple_choice_targets": ["Anagrams", "Not Anagrams"]}, {"inputs": "Given a binary tree, determine whether it is a valid binary search tree (BST).\n\nTree:\n   2\n  / \\\n 1   3\nValid/Invalid BST?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Given an array of integers, return the majority element.\n\nArray: [2, 2, 1, 1, 1, 2, 2]\nMajority element:", "targets": ["2"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Given a string, determine if it is a palindrome.\n\nString: A man a plan a canal Panama\nPalindrome/Not Palindrome?", "targets": ["Palindrome"], "multiple_choice_targets": ["Palindrome", "Not Palindrome"]}, {"inputs": "Given an array of integers, sort them in ascending order using the bubble sort algorithm.\n\nArray: [64, 34, 25, 12, 22, 11, 90]\nSorted array:", "targets": ["11", "12", "22", "25", "34", "64", "90"], "multiple_choice_targets": ["11, 12, 22, 25, 34, 64, 90", "11, 12, 22, 25, 34, 90, 64", "11, 12, 22, 25, 90, 34, 64", "11, 12, 22, 90, 25, 34, 64"]}, {"inputs": "Given a string, determine if it is a palindrome.\n\nString: racecar\nIs it a palindrome?", "targets": ["Yes"], "multiple_choice_targets": ["Yes", "No"]}, {"inputs": "Given an array of integers, find the second largest element.\n\nArray: [12, 35, 1, 10, 34, 1]\nSecond largest element:", "targets": ["34"], "multiple_choice_targets": ["1", "10", "12", "34", "35"]}, {"inputs": "Given two sorted arrays, merge them into a single sorted array.\n\nArray 1: [1, 3, 4, 5]\nArray 2: [2, 6, 7, 8]\nMerged array:", "targets": ["1", "2", "3", "4", "5", "6", "7", "8"], "multiple_choice_targets": ["1, 2, 3, 4, 5, 6, 7, 8", "1, 2, 3, 4, 5, 7, 6, 8", "1, 2, 3, 5, 4, 6, 7, 8", "1, 2, 3, 5, 4, 6, 8, 7"]}, {"inputs": "Given an array of integers, find the sum of all elements.\n\nArray: [1, 2, 3, 4, 5]\nSum:", "targets": ["15"], "multiple_choice_targets": ["3", "6", "10", "15", "20"]}, {"inputs": "Given a string, reverse the order of the words.\n\nString: \"Hello world\"\nReversed string:", "targets": ["world Hello"], "multiple_choice_targets": ["world Hello", "Hello world", "dlrow olleH", "olleH dlrow"]}, {"inputs": "Given an array of integers, find the maximum subarray sum.\n\nArray: [-2,1,-3,4,-1,2,1,-5,4]\nMaximum subarray sum:", "targets": ["6"], "multiple_choice_targets": ["-2", "1", "3", "4", "6"]}, {"inputs": "Given a list of integers, find the second largest number.\n\nList: [2, 6, -1, 3, 8, 10, 5]\nSecond largest number:", "targets": ["8"], "multiple_choice_targets": ["-1", "2", "3", "5", "6", "8", "10", "11"]}, {"inputs": "Determine whether the given string is a palindrome.\n\nString: racecar\nPalindrome/Not palindrome?", "targets": ["Palindrome"], "multiple_choice_targets": ["Palindrome", "Not palindrome"]}, {"inputs": "Given a string, determine whether it is a valid palindrome after removing at most one character.\n\nString: abca\nValid/Invalid?", "targets": ["Invalid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Given two sorted lists, merge them into a single sorted list.\n\nLists: [1, 3, 5, 7] and [2, 4, 6, 8]\nMerged list:", "targets": ["1", "2", "3", "4", "5", "6", "7", "8"], "multiple_choice_targets": ["1, 3, 5, 7, 2, 4, 6, 8", "2, 4, 6, 8, 1, 3, 5, 7", "1, 2, 3, 4, 5, 6, 7, 8"]}, {"inputs": "Given a list of integers, sort them in non-descending order using the quicksort algorithm.\n\nList: [10, -1, 5, 7, 3, 6]\nSorted list:", "targets": ["-1", "3", "5", "6", "7", "10"], "multiple_choice_targets": ["10, -1, 5, 7, 3, 6", "-1, 3, 5, 6, 7, 10", "10, 7, 6, 5, 3, -1"]}, {"inputs": "Given a string, remove all duplicate characters and return the resulting string.\n\nString: abcdabcde\nResulting string:", "targets": ["abcde"], "multiple_choice_targets": ["abcdabcde", "abcdaebc", "abce", "ade"]}, {"inputs": "Given a string, determine whether it is a palindrome.\n\nString: \"racecar\"\nPalindrome?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a string, determine whether it contains only unique characters.\n\nString: \"abcdefg\"\nUnique characters?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a binary tree, return its maximum depth.\n\nTree: \n      4\n     / \\\n    2   7\n   / \\   \n  1   3  \n         \nMaximum Depth:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Given a sorted array of integers, remove duplicates in-place such that each element appears only once.\n\nArray: [0,0,1,1,1,2,2,3,3,4]\nArray after removing duplicates:", "targets": ["[0, 1, 2, 3, 4]"], "multiple_choice_targets": ["[0, 1, 2, 3, 4]", "[0, 1, 2, 3]", "[0, 1, 2, 3, 4, 4]"]}, {"inputs": "Given a sorted array of integers, find the starting and ending position of a given target value.\n\nArray: [5,7,7,8,8,10]\nTarget: 8\nStarting and ending positions:", "targets": ["[3, 4]"], "multiple_choice_targets": ["[2, 4]", "[3, 5]", "[3, 4]"]}, {"inputs": "Given a matrix of integers in spiral order, return an array of the elements of the matrix in clockwise spiral order.\n\nMatrix: \n[[1,2,3],\n [4,5,6],\n [7,8,9]]\nSpiral order:", "targets": ["[1, 2, 3, 6, 9, 8, 7, 4, 5]"], "multiple_choice_targets": ["[1, 2, 3, 6, 9, 8, 7, 4, 5]", "[1, 4, 7, 8, 9, 6, 3, 2, 5]", "[1, 4, 7, 8, 9, 6, 2, 3, 5]"]}, {"inputs": "Given two strings, determine the length of the longest common subsequence.\n\nStrings: ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ\nLength of longest common subsequence:", "targets": ["26"], "multiple_choice_targets": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26"]}, {"inputs": "Sort the following array in ascending order using the bubble sort algorithm.\n\nArray: [4, 2, 7, 1, 3, 5]\nSorted Array:", "targets": ["[1, 2, 3, 4, 5, 7]"], "multiple_choice_targets": ["[1, 2, 3, 4, 5, 7]", "[7, 5, 4, 3, 2, 1]", "[4, 1, 2, 3, 5, 7]", "[2, 4, 1, 3, 5, 7]", "[1, 7, 5, 3, 2, 4]"]}, {"inputs": "Sort the following array in descending order using the insertion sort algorithm.\n\nArray: [8, 6, 4, 2, 0]\nSorted Array:", "targets": ["[8, 6, 4, 2, 0]"], "multiple_choice_targets": ["[8, 6, 4, 2, 0]", "[0, 2, 4, 6, 8]", "[6, 8, 4, 2, 0]", "[8, 4, 6, 2, 0]", "[0, 8, 6, 4, 2]"]}, {"inputs": "Find the sum of the numbers in the following array.\n\nArray: [3, 5, 1, 7, 9]\nSum:", "targets": ["25"], "multiple_choice_targets": ["1", "3", "5", "7", "9", "15", "18", "20", "22", "25"]}, {"inputs": "Find the product of the numbers in the following array.\n\nArray: [2, 4, 6, 8, 10]\nProduct:", "targets": ["3840"], "multiple_choice_targets": ["2", "4", "6", "8", "10", "40", "120", "240", "384", "3840"]}, {"inputs": "Given a string, reverse it.\n\nString: \"Hello, World!\"\nReversed String:", "targets": ["!dlroW ,olleH"], "multiple_choice_targets": ["!dlroW ,olleH", "Hello, World!", "d!lroW ,olleH", "W!orld ,elloH", "llo,World !eh", "!,lloW drole"]}, {"inputs": "Given a sorted array of integers, remove duplicates in place and return the new length.\n\nArray: [1, 2, 2, 3, 4, 4, 4, 5]\nNew length:", "targets": ["5"], "multiple_choice_targets": ["2", "3", "4", "5", "6", "7", "8"]}, {"inputs": "Implement a function that returns the nth number in the Fibonacci sequence.\n\nn = 7\nFibonacci number:", "targets": ["13"], "multiple_choice_targets": ["5", "8", "10", "13", "15", "18"]}, {"inputs": "Given an array of integers, find the contiguous subarray with the largest sum.\n\nArray: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nLargest sum:", "targets": ["6"], "multiple_choice_targets": ["-1", "1", "3", "4", "5", "6", "7", "8", "9"]}, {"inputs": "Implement a function that checks if a given string is a palindrome.\n\nString: \"racecar\"\nPalindrome?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given two strings, determine if they are anagrams of each other.\n\nStrings: \"silent\", \"listen\"\nAnagrams?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Implement a function that sorts an array of integers in ascending order using the quicksort algorithm.\n\nArray: [3, 1, 4, 1, 5, 9, 2, 6]\nSorted array:", "targets": ["[1, 1, 2, 3, 4, 5, 6, 9]"], "multiple_choice_targets": ["[1, 3, 1, 2, 4, 5, 9, 6]", "[1, 1, 2, 3, 4, 5, 6, 9]", "[9, 6, 5, 4, 3, 2, 1, 1]"]}, {"inputs": "Implement a function that reverses a string in-place.\n\nString: \"hello\"\nReversed string:", "targets": ["\"olleh\""], "multiple_choice_targets": ["\"hello\"", "\"hel lo\"", "\"lohle\"", "\"lloeh\""]}, {"inputs": "Given a sorted array of integers, find the index of a target value. If the target is not found, return -1.\n\nArray: [1, 2, 3, 4, 5]\nTarget: 3\nIndex:", "targets": ["2"], "multiple_choice_targets": ["0", "1", "2", "3", "4"]}, {"inputs": "Implement a function that calculates the factorial of a given non-negative integer.\n\nNumber: 5\nFactorial:", "targets": ["120"], "multiple_choice_targets": ["25", "50", "100", "120", "150"]}, {"inputs": "Given a string, determine if it is a palindrome.\n\nString: \"racecar\"\nPalindrome/Not Palindrome?", "targets": ["Palindrome"], "multiple_choice_targets": ["Palindrome", "Not Palindrome"]}, {"inputs": "Implement a function that calculates the nth Fibonacci number.\n\nn = 6\nFibonacci number:", "targets": ["8"], "multiple_choice_targets": ["3", "5", "8", "13", "21"]}, {"inputs": "Given two strings, determine if they are anagrams of each other (contain the same characters in a different order).\n\nStrings: \"listen\", \"silent\"\nAnagrams/Not Anagrams?", "targets": ["Anagrams"], "multiple_choice_targets": ["Anagrams", "Not Anagrams"]}, {"inputs": "Given an array of integers, return the indices of the two numbers that add up to a given target.\n\nArray: [2, 7, 11, 15]\nTarget: 9\nIndices:", "targets": ["[0, 1]"], "multiple_choice_targets": ["[0, 1]", "[0, 2]", "[0, 3]", "[1, 2]", "[1, 3]", "[2, 3]"]}, {"inputs": "Given a sorted array of integers, remove duplicates in place and return the new length.\n\nArray: [1,1,2,3,3,4,5,5]\nNew length:", "targets": ["5"], "multiple_choice_targets": ["3", "4", "5", "6", "7"]}, {"inputs": "Given a string, reverse each word in the string.\n\nString: \"hello world\"\nReversed String: \"olleh dlrow\"", "targets": ["\"olleh dlrow\""], "multiple_choice_targets": ["\"dlrow olleh\"", "\"hello world\"", "\"lleho dlwor\"", "\"world hello\"", "\"wolleh dlorw\""]}, {"inputs": "Given a binary tree, return its inorder traversal.\n\nTree: \n      4\n     / \\\n    2   7\n   / \\   \n  1   3  \n         \nInorder Traversal:", "targets": ["[1, 2, 3, 4, 7]"], "multiple_choice_targets": ["[1, 2, 3, 4, 7]", "[1, 3, 2, 4, 7]", "[2, 1, 3, 4, 7]", "[2, 3, 1, 4, 7]"]}, {"inputs": "Given a linked list, determine whether it has a cycle in it.\n\nLinked List: \n1 -> 2 -> 3 -> 4 -> 5 -> 2\nHas Cycle?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a string, determine if it is a palindrome. Consider only alphanumeric characters and ignore cases.\nString: \"A man, a plan, a canal: Panama\"\nPalindrome or not?", "targets": ["Palindrome"], "multiple_choice_targets": ["Palindrome", "Not Palindrome"]}, {"inputs": "Given two strings s and t , write a function to determine if t is an anagram of s.\n\nString 1: \"anagram\"\nString 2: \"nagaram\"\nAnagram or not?", "targets": ["Anagram"], "multiple_choice_targets": ["Anagram", "Not Anagram"]}, {"inputs": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nArray: [2,2,1]\nSingle element:", "targets": ["1"], "multiple_choice_targets": ["1", "2"]}, {"inputs": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nArray: [1,3,5,6]\nTarget: 5\nIndex:", "targets": ["2"], "multiple_choice_targets": ["1", "2", "3", "4"]}, {"inputs": "Given a matrix of integers, return the transpose of the matrix.\n\nMatrix:\n[[1,2,3],\n [4,5,6],\n [7,8,9]]\nTranspose:", "targets": ["[1, 4, 7], [2, 5, 8], [3, 6, 9]"], "multiple_choice_targets": ["[[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"]}, {"inputs": "Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\nArray: [-1,2,1,-4]\nTarget: 1\nClosest sum:", "targets": ["2"], "multiple_choice_targets": ["-4", "-3", "-2", "-1", "0", "1", "2", "3", "4"]}, {"inputs": "Given a string, reverse the order of words.\n\nString: \"the quick brown fox\"\nReversed string:", "targets": ["fox brown quick the"], "multiple_choice_targets": ["brown quick fox the", "quick brown fox the", "the brown quick fox", "the fox brown quick"]}, {"inputs": "Given an array of integers, find the two numbers that add up to a given target.\n\nArray: [2, 7, 11, 15]\nTarget: 9\nNumbers:", "targets": ["2", "7"], "multiple_choice_targets": ["2, 11", "7, 11", "11, 15"]}, {"inputs": "Given a binary tree, determine if it is a valid binary search tree.\n\nTree:   5\n      / \\\n     3   7\n    / \\ /\n   1  4 6\nValid BST?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a string, find the first non-repeating character and return its index. If it does not exist, return -1.\n\nString: \"leetcode\"\nIndex:", "targets": ["0"], "multiple_choice_targets": ["-1", "0", "1", "2", "3", "4", "5", "6", "7", "8"]}, {"inputs": "Given an array of integers, rotate the array to the right by k steps.\n\nArray: [1,2,3,4,5,6,7]\nK: 3\nRotated array:", "targets": ["[5, 6, 7, 1, 2, 3, 4]"], "multiple_choice_targets": ["[1, 2, 3, 4, 5, 6, 7]", "[7, 6, 5, 4, 3, 2, 1]", "[5, 4, 3, 2, 1, 7, 6]"]}, {"inputs": "Given a linked list, determine if it has a cycle in it.\n\nList: 1 -> 2 -> 3 -> 4 -> 2\nHas cycle?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Write a function that takes in a string and returns the number of vowels in the string.\n\nString: \"Hello, world!\"\nNumber of vowels:", "targets": ["3"], "multiple_choice_targets": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}, {"inputs": "Find the second largest number in the following array.\n\nArray: [3, 8, 1, 6, 4]\nSecond largest number:", "targets": ["6"], "multiple_choice_targets": ["1", "3", "4", "6", "8"]}, {"inputs": "Given a string, reverse the order of the words in the string.\n\nString: \"The quick brown fox\"\nReversed string:", "targets": ["fox brown quick The"], "multiple_choice_targets": ["The quick brown fox", "brown quick The fox", "quick brown fox The", "fox quick The brown"]}, {"inputs": "Determine whether the given string is a palindrome.\n\nString: \"racecar\"\nPalindrome?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Write a function that takes in a list of integers and returns the average of all the numbers in the list.\n\nList: [2, 4, 6, 8]\nAverage:", "targets": ["5.0"], "multiple_choice_targets": ["2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0"]}, {"inputs": "Given a string, remove all the vowels from the string.\n\nString: \"Hello, world!\"\nString with vowels removed:", "targets": ["Hll, wrld!"], "multiple_choice_targets": ["Hello, world!", "Halo, world!", "Hll, world!", "Hll, wrld", "Hlo, wrld!"]}, {"inputs": "Implement a function that sorts an array of integers in ascending order.\n\nArray: [5, 2, 9, 3, 1]\nSorted array:", "targets": ["[1, 2, 3, 5, 9]"], "multiple_choice_targets": ["[5, 2, 9, 3, 1]", "[1, 3, 2, 5, 9]", "[1, 2, 3, 9, 5]"]}, {"inputs": "Given two strings, determine whether they are anagrams of each other.\n\nString 1: \"silent\"\nString 2: \"listen\"\nAnagram/Not anagram?", "targets": ["Anagram"], "multiple_choice_targets": ["Anagram", "Not anagram"]}, {"inputs": "Implement a function that finds the maximum sum of any contiguous subarray within an array of integers.\n\nArray: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nMaximum sum:", "targets": ["6"], "multiple_choice_targets": ["-2", "6", "-1", "4"]}, {"inputs": "Implement a function that determines whether a given integer is a prime number.\n\nInteger: 17\nPrime/Not prime?", "targets": ["Prime"], "multiple_choice_targets": ["Prime", "Not prime"]}, {"inputs": "Implement a function that calculates the factorial of a non-negative integer.\n\nInteger: 5\nFactorial:", "targets": ["120"], "multiple_choice_targets": ["20", "24", "120", "125"]}, {"inputs": "Given a string, implement a function that finds the length of the longest substring with no repeating characters.\n\nString: \"abcabcbb\"\nLength of longest substring:", "targets": ["3"], "multiple_choice_targets": ["2", "3", "4", "5"]}, {"inputs": "Given a sorted array, remove all duplicates in-place such that each element appears only once and return the new length.\n\nArray: [1, 1, 2, 2, 3, 4, 5, 5]\nNew length:", "targets": ["5"], "multiple_choice_targets": ["3", "4", "5", "6"]}, {"inputs": "Implement a function to reverse a string in-place.\n\nString: \"hello\"\nReversed string:", "targets": ["olleh"], "multiple_choice_targets": ["hello", "lehlo", "ollhe", "ollheo"]}, {"inputs": "Given a list of integers, output the two indices (i, j) such that the sum of the two elements at those indices is equal to a given target value.\n\nList: [2, 7, 11, 15]\nTarget: 9\nIndices:", "targets": ["0", "1"], "multiple_choice_targets": ["(0, 1)", "(0, 2)", "(0, 3)", "(1, 2)"]}, {"inputs": "Implement a function to determine if a number is prime.\n\nNumber: 7\nPrime/Not Prime?", "targets": ["Prime"], "multiple_choice_targets": ["Prime", "Not Prime"]}, {"inputs": "Implement a function to check if a string is a valid parentheses string.\n\nString: \"(()())\"\nValid/Invalid?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Given a binary tree, find the maximum path sum.\n\nTree:\n     1\n    / \\\n   2   3\nMax path sum:", "targets": ["6"], "multiple_choice_targets": ["-6", "-4", "-2", "0", "2", "4", "6", "8"]}, {"inputs": "Given an array of integers nums, sort the array in ascending order.\n\nArray: [5,2,3,1]\nSorted array:", "targets": ["[1, 2, 3, 5]"], "multiple_choice_targets": ["[1, 2, 3, 5]", "[5, 3, 2, 1]", "[1, 3, 2, 5]"]}, {"inputs": "Given a string s, return the length of the longest substring without repeating characters.\n\nString: \"abcabcbb\"\nLength of longest substring:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5", "6"]}, {"inputs": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n\nArray: [2,2,1]\nSingle number:", "targets": ["1"], "multiple_choice_targets": ["1", "2"]}, {"inputs": "Given a string s, reverse only all the vowels in the string and return it.\n\nString: \"hello\"\nReversed vowels:", "targets": ["holle"], "multiple_choice_targets": ["hello", "holle", "helle", "hullo", "hyllo"]}, {"inputs": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\n\nArray 1: [1,2,3,0,0,0]\nArray 2: [2,5,6]\nMerged array:", "targets": ["[1, 2, 2, 3, 5, 6]"], "multiple_choice_targets": ["[1, 2, 2, 3, 5, 6]", "[1, 2, 3, 2, 5, 6]", "[1, 2, 2, 3, 6, 5]"]}, {"inputs": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\nString: \"Let's code\"\nReversed string: \"s'teL edoc\"", "targets": ["s'teL edoc"], "multiple_choice_targets": ["s'teL edoc", "tseL edoc", "edoc tseL"]}, {"inputs": "Given a binary tree, return the inorder traversal of its nodes' values.\n\nTree:\n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\nInorder traversal:", "targets": ["[4, 2, 5, 1, 6, 3]"], "multiple_choice_targets": ["[4, 2, 5, 1, 6, 3]", "[1, 2, 3, 4, 5, 6]", "[4, 5, 2, 6, 3, 1]"]}, {"inputs": "Given a sorted array nums, remove the duplicates in-place such that each element appears only once.\n\nArray: [1,1,2,3,3,4]\nModified array:", "targets": ["[1, 2, 3, 4]"], "multiple_choice_targets": ["[1, 2, 3, 4]", "[1, 1, 2, 3, 3, 4]", "[1, 2, 3]"]}, {"inputs": "Given a non-negative integer x, compute and return the square root of x.\n\nx: 16\nSquare root:", "targets": ["4"], "multiple_choice_targets": ["4", "2", "8"]}, {"inputs": "Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\n\nString: \"abcdefg\", k: 2\nReversed string: \"bacdfeg\"", "targets": ["bacdfeg"], "multiple_choice_targets": ["bacdfeg", "badcfeg", "bcadfe"]}, {"inputs": "Given a linked list, remove the n-th node from the end of list and return its head.\n\nList: \n1 -> 2 -> 3 -> 4 -> 5\nn: 2\nModified list: \n1 -> 2 -> 3 -> 5", "targets": ["1 -> 2 -> 3 -> 5"], "multiple_choice_targets": ["1 -> 2 -> 3 -> 5", "1 -> 2 -> 4 -> 5", "1 -> 3 -> 4 -> 5"]}, {"inputs": "Implement a function that takes in a string and returns the reverse of the string.\n\nString: \"hello\"\nReversed string:", "targets": ["olleh"], "multiple_choice_targets": ["hello", "hloel", "leloh", "holle"]}, {"inputs": "Given a list of integers, find the second largest number in the list.\n\nList: [1, 3, 5, 7, 9, 2, 4, 6, 8]\nSecond largest number:", "targets": ["8"], "multiple_choice_targets": ["1", "2", "3", "4", "5", "6", "7", "8", "9"]}, {"inputs": "Given a binary tree, implement a function to check if it is a valid binary search tree.\n\nTree:\n        5\n      /   \\\n     3     8\n    / \\   /\n   2   4 7\nValid binary search tree:", "targets": ["True"], "multiple_choice_targets": ["False"]}, {"inputs": "Given a list of integers, find the sum of all even numbers in the list.\n\nList: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nSum of even numbers:", "targets": ["20"], "multiple_choice_targets": ["10", "12", "14", "16", "18", "20", "22", "24", "26", "28"]}, {"inputs": "Given a string, determine if it is a palindrome.\n\nString: \"racecar\"\nIs palindrome:", "targets": ["True"], "multiple_choice_targets": ["False"]}, {"inputs": "Implement a function that takes in two strings and returns the minimum number of edits (insertions, deletions, or substitutions) needed to transform one string into the other.\n\nStrings: \"kitten\" and \"sitting\"\nMinimum number of edits:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}, {"inputs": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n\nArray: [9,6,4,2,3,5,7,0,1]\nMissing number:", "targets": ["8"], "multiple_choice_targets": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}, {"inputs": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n.\n\nn = 3\nUnique BSTs:", "targets": ["[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2]]"], "multiple_choice_targets": ["[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2]]", "[[1,null,2,3],[2,1,null,null,3],[3,2,null,1],[3,1,null,null,2],[2,null,1,null,3]]", "[[1,null,2,null,3],[1,null,3,2],[2,3,1],[3,2,null,1]]"]}, {"inputs": "Given a binary tree, determine if it is a valid binary search tree (BST).\n\nTree: \n   2\n  / \\\n 1   3\nOutput:", "targets": ["true"], "multiple_choice_targets": ["true", "false"]}, {"inputs": "Reverse a singly linked list.\n\nList: 1 -> 2 -> 3 -> 4 -> 5\nReversed List:", "targets": ["5 -> 4 -> 3 -> 2 -> 1"], "multiple_choice_targets": ["5 -> 4 -> 3 -> 2 -> 1", "1 -> 2 -> 3 -> 4 -> 5", "1 -> 5 -> 2 -> 4 -> 3"]}, {"inputs": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nArray: [-2,1,-3,4,-1,2,1,-5,4]\nMaximum subarray sum:", "targets": ["6"], "multiple_choice_targets": ["-2", "1", "4", "6", "7"]}, {"inputs": "Given a string s, determine the length of the longest substring without repeating characters.\n\nString: \"abcabcbb\"\nLength of longest substring:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Implement a function that checks whether a given string is a palindrome.\n\nString: \"racecar\"\nPalindrome/Not Palindrome?", "targets": ["Palindrome"], "multiple_choice_targets": ["Palindrome", "Not Palindrome"]}, {"inputs": "Given an array of integers, find the largest product of any two distinct integers in the array.\n\nArray: [1, 2, 3, 4, 5]\nLargest product:", "targets": ["20"], "multiple_choice_targets": ["2", "6", "8", "10", "15", "20"]}, {"inputs": "Implement a function that takes a list of numbers and returns the second largest number in the list.\n\nList: [1, 2, 3, 4, 5]\nSecond largest number:", "targets": ["4"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Given a sorted array of integers, implement a function that finds the index of a target integer within the array. If the target integer is not in the array, return -1.\n\nArray: [1, 3, 5, 7, 9]\nTarget: 5\nIndex:", "targets": ["2"], "multiple_choice_targets": ["-1", "0", "1", "2", "3", "4"]}, {"inputs": "Implement a function that takes a list of words and returns the longest word in the list.\n\nList: [\"hello\", \"world\", \"python\", \"programming\"]\nLongest word:", "targets": ["programming"], "multiple_choice_targets": ["hello", "world", "python", "programming"]}, {"inputs": "Sort the given array in ascending order.\n\nArray: [5, 2, 9, 1, 5, 6]\nSorted array:", "targets": ["[1, 2, 5, 5, 6, 9]"], "multiple_choice_targets": ["[1, 2, 5, 5, 6, 9]", "[9, 6, 5, 5, 2, 1]", "[1, 2, 5, 5, 6]", "[1, 2, 5, 5, 6, 9, 10]"]}, {"inputs": "Given a string s, determine if it is a palindrome.\n\nString: \"racecar\"\nPalindrome?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a sorted array of integers, remove duplicates in-place such that each element appears only once and returns the new length.\n\nArray: [1,1,2,3,3,4,5,5,6]\nNew length:", "targets": ["6"], "multiple_choice_targets": ["4", "5", "6", "7", "8"]}, {"inputs": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence.\n\nArray: [100, 4, 200, 1, 3, 2]\nLength of longest consecutive sequence:", "targets": ["4"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Given a binary tree, return the inorder traversal of its nodes' values.\n\nTree:\n    1\n     \\\n      2\n     /\n    3\nInorder traversal:", "targets": ["[1, 3, 2]"], "multiple_choice_targets": ["[1, 2, 3]", "[2, 1, 3]", "[3, 2, 1]", "[1, 2, 3, 4]"]}, {"inputs": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\nArray: [1, 2, 2, 3, 1]\nSingle element:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Implement a function that takes in a string and returns True if the string is a palindrome, False otherwise.\n\nString: \"racecar\"\nIs it a palindrome?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a list of integers, implement a function that returns the maximum product that can be obtained from any three integers in the list.\n\nList: [1, 2, 3, 4, 5, 6]\nMaximum product:", "targets": ["120"], "multiple_choice_targets": ["36", "120", "720", "840", "1260"]}, {"inputs": "Given an array of integers, implement a function to move all the zeros to the end while maintaining the relative order of the other elements.\n\nArray: [0, 1, 0, 3, 12]\nModified array:", "targets": ["[1, 3, 12, 0, 0]"], "multiple_choice_targets": ["[1, 0, 3, 12, 0]", "[1, 3, 0, 12, 0]", "[0, 0, 1, 3, 12]", "[1, 3, 12]"]}, {"inputs": "Given a sorted array and a target value, implement a function to return the index of the target value. If the target value is not found in the array, return -1.\n\nArray: [1, 3, 5, 7, 9]\nTarget value: 5\nIndex:", "targets": ["2"], "multiple_choice_targets": ["-1", "0", "1", "2", "3", "4"]}, {"inputs": "Given a list of integers, implement a function to find the second largest integer in the list.\n\nList: [5, 2, 9, 6, 1]\nSecond largest integer:", "targets": ["6"], "multiple_choice_targets": ["1", "2", "5", "6", "9"]}, {"inputs": "Given a string, reverse it.\n\nString: \"hello\"\nReversed String:", "targets": ["olleh"], "multiple_choice_targets": ["hello", "olelh", "holle", "lehlo"]}, {"inputs": "Given a list of integers, find the sum of all even numbers.\n\nList: [1, 2, 3, 4, 5, 6]\nSum of even numbers:", "targets": ["12"], "multiple_choice_targets": ["6", "8", "10", "12", "14", "16"]}, {"inputs": "Given a string, check whether it is a palindrome.\n\nString: \"racecar\"\nIs Palindrome:", "targets": ["true"], "multiple_choice_targets": ["true", "false"]}, {"inputs": "Given a list of integers, remove all duplicates and return the unique elements.\n\nList: [1, 2, 3, 2, 4, 5, 3]\nUnique Elements:", "targets": ["[1, 2, 3, 4, 5]"], "multiple_choice_targets": ["[1, 2, 3]", "[2, 4, 5, 3, 1]", "[1, 2, 3, 4, 5, 3, 2]"]}, {"inputs": "Given a string, count the number of vowels in it.\n\nString: \"hello world\"\nNumber of vowels:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5", "6"]}, {"inputs": "Given two lists of integers, find their intersection.\n\nList 1: [1, 2, 3, 4, 5]\nList 2: [4, 5, 6, 7]\nIntersection:", "targets": ["[4, 5]"], "multiple_choice_targets": ["[1, 2, 3]", "[4, 5, 6, 7]", "[1, 2, 3, 4, 5, 6, 7]"]}, {"inputs": "Given a string, determine whether it is a palindrome or not.\n\nString: \"racecar\"\nIs the string a palindrome?", "targets": ["Yes"], "multiple_choice_targets": ["Yes", "No"]}, {"inputs": "Given a list of integers, find the product of all odd numbers in the list.\n\nList: [1, 2, 3, 4, 5, 6, 7]\nProduct of odd numbers:", "targets": ["105"], "multiple_choice_targets": ["15", "35", "45", "55", "65", "75", "85", "95", "105", "115"]}, {"inputs": "Given an integer, determine whether it is prime or not.\n\nInteger: 13\nIs the integer prime?", "targets": ["Yes"], "multiple_choice_targets": ["Yes", "No"]}, {"inputs": "Given two strings, determine whether they are anagrams or not.\n\nStrings: \"listen\" and \"silent\"\nAre the strings anagrams?", "targets": ["Yes"], "multiple_choice_targets": ["Yes", "No"]}, {"inputs": "Given a list of integers, find the maximum sum of any contiguous subarray.\n\nList: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nMaximum sum of any contiguous subarray:", "targets": ["6"], "multiple_choice_targets": ["-2", "-1", "-3", "4", "6", "8", "10", "12", "14", "16"]}, {"inputs": "Given a string, remove all duplicate characters.\n\nString: \"hello\"\nString with duplicates removed:", "targets": ["helo"], "multiple_choice_targets": ["heo", "hlo", "helo", "hllo", "helloo", "hll"]}, {"inputs": "Implement a function to reverse a string in place.\n\nString: \"Hello, world!\"\nReversed string:", "targets": ["!dlrow ,olleH"], "multiple_choice_targets": [",olleH! dlrow", "world, Hello!", "!dlrow ,olleH", "d!lrow ,olleH"]}, {"inputs": "Given two strings, implement a function to check if they are anagrams of each other.\n\nStrings: \"listen\", \"silent\"\nAnagram?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Implement a function to find the maximum sum of any contiguous subarray of a given array.\n\nArray: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nMaximum subarray sum:", "targets": ["6"], "multiple_choice_targets": ["-5", "1", "4", "6", "7"]}, {"inputs": "Implement a function to merge two sorted arrays into one sorted array.\n\nArrays: [1, 3, 5], [2, 4, 6]\nMerged array:", "targets": ["[1, 2, 3, 4, 5, 6]"], "multiple_choice_targets": ["[1, 2, 3, 4, 5, 6]", "[2, 4, 6, 1, 3, 5]", "[1, 3, 5, 2, 4, 6]", "[6, 5, 4, 3, 2, 1]"]}, {"inputs": "Given a string, implement a function to find the longest palindromic substring within the string.\n\nString: \"babad\"\nLongest palindromic substring:", "targets": ["bab"], "multiple_choice_targets": ["bad", "bab", "aba", "dab"]}, {"inputs": "Given a linked list, implement a function to reverse the order of the nodes in the list.\n\nList: 1 -> 2 -> 3 -> 4\nReversed list:", "targets": ["4 -> 3 -> 2 -> 1"], "multiple_choice_targets": ["1 -> 2 -> 3 -> 4", "4 -> 3 -> 2 -> 1", "1 -> 3 -> 2 -> 4", "4 -> 2 -> 3 -> 1"]}, {"inputs": "Implement a function to find the factorial of a given number.\n\nNumber: 5\nFactorial: ?", "targets": ["120"], "multiple_choice_targets": ["120", "24", "25", "5"]}, {"inputs": "Determine whether the given sequence of parentheses is properly matched.\n\nSequence: ( { [ ] } )\nValid/Invalid?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Implement a function to reverse a string.\n\nString: \"hello\"\nReversed String: ?", "targets": ["olleh"], "multiple_choice_targets": ["hello", "olleh", "lol", "el"]}, {"inputs": "Determine whether the given sequence of parentheses is properly matched.\n\nSequence: [ { } ( ) ]\nValid/Invalid?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Implement a function to check if a given string is a palindrome.\n\nString: \"racecar\"\nPalindrome/Not Palindrome?", "targets": ["Palindrome"], "multiple_choice_targets": ["Palindrome", "Not Palindrome"]}, {"inputs": "Determine whether the given sequence of parentheses is properly matched.\n\nSequence: [ { ( ) } ]\nValid/Invalid?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Find the product of the numbers in the following array.\n\nArray: [1, 3, 5, 7, 9]\nProduct:", "targets": ["945"], "multiple_choice_targets": ["1", "3", "5", "7", "9", "15", "21", "27", "35", "45"]}, {"inputs": "Given a string, determine if it is a palindrome.\n\nString: racecar", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given a string, determine if it is a palindrome.\n\nString: hello", "targets": ["False"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given an array of integers, find the maximum value.\n\nArray: [5, 8, 3, 2, 9, 4, 1, 7, 6]\nMaximum value:", "targets": ["9"], "multiple_choice_targets": ["1", "2", "3", "4", "5", "6", "7", "8", "9"]}, {"inputs": "Given an array of integers, find the maximum value.\n\nArray: [10, 25, 30, 20, 15, 5]\nMaximum value:", "targets": ["30"], "multiple_choice_targets": ["5", "10", "15", "20", "25", "30"]}, {"inputs": "Given a string, determine if it is a palindrome (reads the same forwards and backwards).\n\nString: \"racecar\"\nIs palindrome?", "targets": ["True"], "multiple_choice_targets": ["True", "False"]}, {"inputs": "Given an integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nArray: [-2,1,-3,4,-1,2,1,-5,4]\nLargest sum:", "targets": ["6"], "multiple_choice_targets": ["-2", "-1", "1", "6", "7"]}, {"inputs": "Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.\n\ns: \"cbaebabacd\" p: \"abc\"\nStart indices:", "targets": ["[0,6]"], "multiple_choice_targets": ["[0,5]", "[1,6]", "[2,7]", "[3,8]"]}, {"inputs": "Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\nMatrix:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nSpiral order:", "targets": ["[1, 2, 3, 6, 9, 8, 7, 4, 5]"], "multiple_choice_targets": ["[1, 4, 7, 8, 9, 6, 3, 2, 5]", "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "[1, 4, 7, 6, 9, 8, 5, 2, 3]"]}, {"inputs": "Given a sorted linked list, delete all duplicates such that each element appears only once.\n\nList: 1 -> 1 -> 2 -> 3 -> 3\nList after removing duplicates:", "targets": ["1 -> 2 -> 3"], "multiple_choice_targets": ["1 -> 1 -> 2 -> 3", "1 -> 2 -> 3 -> 3", "1 -> 2 -> 3"]}, {"inputs": "Given a sorted array of integers, write a function that returns a sorted array of their squares.\n\nArray: [-4, -2, 0, 3, 5]\nSorted squares:", "targets": ["[0, 4, 9, 16, 25]"], "multiple_choice_targets": ["[-25, -16, -9, -4, 0]", "[0, 4, 9, 16, 25]", "[25, 16, 9, 4, 0]", "[0, 5, 9, 16, 25]"]}, {"inputs": "Implement a function that determines whether a given string is a valid IPv4 address.\n\nString: \"192.168.0.1\"\nValid/Invalid?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Implement a function that returns the nth Fibonacci number.\n\nn: 10\nFibonacci number:", "targets": ["55"], "multiple_choice_targets": ["21", "34", "55", "89"]}, {"inputs": "Given two strings, determine if they are anagrams of each other (contain the same characters in any order).\n\nStrings: \"listen\", \"silent\"\nAnagram/Not anagram?", "targets": ["Anagram"], "multiple_choice_targets": ["Anagram", "Not anagram"]}, {"inputs": "Implement a function that merges two sorted arrays into one sorted array.\n\nArrays: [1, 3, 5], [2, 4, 6]\nMerged array:", "targets": ["[1, 2, 3, 4, 5, 6]"], "multiple_choice_targets": ["[1, 2, 3, 4, 5, 6]", "[1, 3, 5, 2, 4, 6]", "[2, 4, 6, 1, 3, 5]", "[1, 5, 3, 2, 6, 4]"]}, {"inputs": "Given a string, implement a function that returns the first non-repeating character.\n\nString: \"leetcode\"\nFirst non-repeating character:", "targets": ["\"l\""], "multiple_choice_targets": ["\"l\"", "\"t\"", "\"c\"", "\"d\""]}, {"inputs": "Given a sorted array of integers, remove duplicates in-place such that each element appears only once and return the new length.\n\nArray: [1,1,2,3,3,4,5,5]\nNew Length:", "targets": ["5"], "multiple_choice_targets": ["3", "4", "5", "6", "7"]}, {"inputs": "Given a string, reverse the order of words in the string.\n\nString: \"The quick brown fox jumps over the lazy dog.\"\nReversed String:", "targets": ["dog. lazy the over jumps fox brown quick The"], "multiple_choice_targets": ["The quick brown fox jumps over the lazy dog.", "The lazy dog. over jumps fox brown quick"]}, {"inputs": "Given two strings, check if they are anagrams of each other.\n\nString 1: \"listen\"\nString 2: \"silent\"\nAre Anagrams:", "targets": ["true"], "multiple_choice_targets": ["true", "false"]}, {"inputs": "Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\nMatrix: \n[ \n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\nSpiral Order:", "targets": ["[1, 2, 3, 6, 9, 8, 7, 4, 5]"], "multiple_choice_targets": ["[1, 2, 4, 5, 7, 8, 9, 6, 3]", "[1, 4, 7, 8, 9, 6, 3, 2, 5]", "[1, 2, 3, 4, 5, 6, 7, 8, 9]"]}, {"inputs": "Given an array of integers, find the contiguous subarray with the largest sum.\n\nArray: [-2,1,-3,4,-1,2,1,-5,4]\nLargest Sum:", "targets": ["6"], "multiple_choice_targets": ["-2", "1", "6", "8", "10"]}, {"inputs": "Given a string, find the length of the longest substring without repeating characters.\n\nString: \"abcabcbb\"\nLength of Longest Substring:", "targets": ["3"], "multiple_choice_targets": ["2", "3", "4", "5"]}, {"inputs": "Given a string, count the occurrences of each character in the string.\n\nString: \"abracadabra\"\nOccurrences:", "targets": ["{'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1}"], "multiple_choice_targets": ["{'a': 4, 'b': 2, 'r': 2, 'c': 1, 'd': 1}", "{'a': 5, 'b': 3, 'r': 2, 'c': 1, 'd': 1}", "{'a': 5, 'b': 2, 'r': 2, 'c': 1, 'e': 1}"]}, {"inputs": "Implement a function to determine whether a given string is a palindrome.\n\nString: \"racecar\"\nPalindrome/Not Palindrome?", "targets": ["Palindrome"], "multiple_choice_targets": ["Palindrome", "Not Palindrome"]}, {"inputs": "Given two sorted arrays, merge them into a single sorted array.\n\nArray 1: [1, 3, 5]\nArray 2: [2, 4, 6]\nMerged Array:", "targets": ["[1, 2, 3, 4, 5, 6]"], "multiple_choice_targets": ["[1, 3, 5, 2, 4, 6]", "[2, 4, 6, 1, 3, 5]", "[1, 2, 3, 4, 5, 6]"]}, {"inputs": "Implement a function to determine whether a given array is sorted in ascending order.\n\nArray: [1, 3, 5, 7, 9]\nSorted/Not Sorted?", "targets": ["Sorted"], "multiple_choice_targets": ["Sorted", "Not Sorted"]}, {"inputs": "Given a string and a character, remove all occurrences of the character from the string.\n\nString: \"hello world\"\nCharacter: \"l\"\nString after removal:", "targets": ["heo word"], "multiple_choice_targets": ["helo word", "hell word", "heo word", "hello world"]}, {"inputs": "Given an array of integers, find the largest and smallest elements in the array.\n\nArray: [5, 7, 3, 9, 2, 6]\nLargest element: Smallest element:", "targets": ["9", "2"], "multiple_choice_targets": ["7", "9", "6", "2", "5"]}, {"inputs": "Implement a function that checks if a given string is a palindrome.\n\nString: \"racecar\"\nIs it a palindrome?", "targets": ["true"], "multiple_choice_targets": ["true", "false"]}, {"inputs": "Given a binary tree, find its maximum depth.\n\nTree:\n   3\n /   \\\n9   20\n   /  \\\n 15   7\nMaximum depth:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4"]}, {"inputs": "Implement a function that sorts an array of integers in ascending order using the quicksort algorithm.\n\nArray: [3, 7, 8, 5, 2, 1, 9, 5, 4]\nSorted array:", "targets": ["[1, 2, 3, 4, 5, 5, 7, 8, 9]"], "multiple_choice_targets": ["[1, 2, 3, 4, 5, 5, 7, 8, 9]", "[3, 5, 2, 1, 4, 5, 7, 8, 9]", "[9, 8, 7, 5, 5, 4, 3, 2, 1]"]}, {"inputs": "Given a linked list, remove the nth node from the end of the list and return its head.\n\nList: 1 -> 2 -> 3 -> 4 -> 5\nn = 2\nNew list:", "targets": ["1 -> 2 -> 3 -> 5"], "multiple_choice_targets": ["1 -> 2 -> 3 -> 4", "1 -> 2 -> 4 -> 5", "1 -> 3 -> 4 -> 5", "2 -> 3 -> 4 -> 5"]}, {"inputs": "Implement a function that checks if a given number is prime.\n\nNumber: 37\nIs it prime?", "targets": ["true"], "multiple_choice_targets": ["true", "false"]}, {"inputs": "Given a list of integers, return the two numbers that add up to a specific target.\n\nList: [2, 7, 11, 15]\nTarget: 9\nTwo numbers:", "targets": ["2", "7"], "multiple_choice_targets": ["-2", "1", "6", "8", "10"]}, {"inputs": "Implement a function that takes in a string and returns the first non-repeating character.\n\nString: \"leetcode\"\nFirst non-repeating character:", "targets": ["l"], "multiple_choice_targets": ["e", "t", "c", "o", "d"]}, {"inputs": "Given an array of integers, find the two numbers that have the largest product.\n\nArray: [1, 2, 3, 4, 5]\nLargest product:", "targets": ["20"], "multiple_choice_targets": ["6", "30", "120", "720"]}, {"inputs": "Implement a function that takes in a string and removes all duplicate characters from the string.\n\nString: \"leetcodel\"\nString without duplicates:", "targets": ["lecod"], "multiple_choice_targets": ["leetcodel", "led", "lo", "leet", "lec"]}, {"inputs": "Given an array of integers, find if there are any two elements that sum to zero.\n\nArray: [-2, 0, 1, 2, 3]\nDo any two elements sum to zero?", "targets": ["true"], "multiple_choice_targets": ["true", "false"]}, {"inputs": "Implement a function that takes in a string and returns the length of the longest palindromic substring.\n\nString: \"babad\"\nLength of longest palindromic substring:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}, {"inputs": "Given a sorted (in ascending order) integer array nums of n elements and a target value, write a function to search target in nums. If target exists, then return its index, otherwise return -1.\n\nArray: [-1,0,3,5,9,12]\nTarget: 9\nIndex:", "targets": ["4"], "multiple_choice_targets": ["0", "1", "2", "3", "4", "5"]}, {"inputs": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\n\nnum1: \"123\"\nnum2: \"456\"\nProduct:", "targets": ["56088"], "multiple_choice_targets": ["123456", "55368", "55548", "56088", "57948"]}, {"inputs": "Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nString: \"babad\"\nLongest palindromic substring:", "targets": ["bab"], "multiple_choice_targets": ["ba", "ab", "bab", "bad", "dab"]}, {"inputs": "Given a string s, find the length of the longest substring without repeating characters.\n\nString: \"pwwkew\"\nLength of longest substring:", "targets": ["3"], "multiple_choice_targets": ["2", "3", "4", "5", "6"]}, {"inputs": "Implement a function that finds the first non-repeated character in a string.\n\nString: \"aabbccdeeffgh\"\nFirst non-repeated character:", "targets": ["\"d\""], "multiple_choice_targets": ["\"a\"", "\"b\"", "\"c\"", "\"d\"", "\"e\"", "\"f\"", "\"g\"", "\"h\""]}, {"inputs": "Given an array of integers, find the two numbers such that they add up to a specific target number.\n\nArray: [2, 7, 11, 15]\nTarget: 9\nOutput:", "targets": ["[0, 1]"], "multiple_choice_targets": ["[0, 1]", "[0, 2]", "[0, 3]", "[1, 2]", "[1, 3]", "[2, 3]"]}, {"inputs": "Implement a function that checks whether a given string is a valid IPv4 address.\n\nIP address: \"192.168.0.1\"\nValid/Invalid?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Given a sorted array of integers, implement a function that removes all duplicates in-place.\n\nArray: [1, 1, 2, 2, 3, 4, 5, 5, 6]\nArray after removing duplicates:", "targets": ["[1, 2, 3, 4, 5, 6]"], "multiple_choice_targets": ["[1, 2, 3, 4, 5, 6]", "[1, 2, 3, 4, 5]", "[1, 2, 3, 4]", "[1, 2, 3]", "[1, 2]", "[1]"]}, {"inputs": "Implement a function that checks whether a given string is a valid email address.\n\nEmail address: \"example@domain.com\"\nValid/Invalid?", "targets": ["Valid"], "multiple_choice_targets": ["Valid", "Invalid"]}, {"inputs": "Given a binary tree, implement a function that returns its maximum depth.\n\nBinary tree:\n      3\n     / \\\n    9  20\n      /  \\\n     15   7\nMaximum depth:", "targets": ["3"], "multiple_choice_targets": ["1", "2", "3", "4", "5"]}]