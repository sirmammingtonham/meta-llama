[{"inputs": "Python code:\nimport random\n\nprint(random.randint(0, 10))\n\n  choice: prints a random integer between 0 and 10\n  choice: prints the value of pi\n  choice: prints a random floating point number between 0 and 1\n  choice: prints a random boolean value\n\nEnglish language description:", "targets": ["prints a random integer between 0 and 10"], "multiple_choice_targets": ["prints a random integer between 0 and 10", "prints a random boolean value", "prints the value of pi", "prints a random floating point number between 0 and 1"]}, {"inputs": "Python code:\nmy_list = [4, 6, 2, 8, 3]\nprint(sorted(my_list))\n\n  choice: prints a sorted list in descending order\n  choice: prints the sum of all elements in my_list\n  choice: prints the square of each element in my_list\n  choice: prints a sorted list in ascending order\n\nEnglish language description:", "targets": ["prints a sorted list in ascending order"], "multiple_choice_targets": ["prints a sorted list in descending order", "prints the sum of all elements in my_list", "prints a sorted list in ascending order", "prints the square of each element in my_list"]}, {"inputs": "Python code:\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_even(8))\n\n  choice: checks if a number is odd\n  choice: checks if a number is prime\n  choice: checks if a number is even\n  choice: checks if a number is negative\n\nEnglish language description:", "targets": ["checks if a number is even"], "multiple_choice_targets": ["checks if a number is odd", "checks if a number is prime", "checks if a number is even", "checks if a number is negative"]}, {"inputs": "Python code:\ndef add(x, y):\n    return x + y\n\nprint(add(5, 7))\n\n  choice: subtracts two numbers\n  choice: multiplies two numbers\n  choice: divides two numbers\n  choice: adds two numbers\n\nEnglish language description:", "targets": ["adds two numbers"], "multiple_choice_targets": ["subtracts two numbers", "multiplies two numbers", "divides two numbers", "adds two numbers"]}, {"inputs": "Python code:\ndef cube(x):\n    return x*x*x\n\nprint(cube(4))\n\n  choice: returns the square of a number\n  choice: returns the cube of a number\n  choice: returns the square root of a number\n  choice: returns the factorial of a number\n\nEnglish language description:", "targets": ["returns the cube of a number"], "multiple_choice_targets": ["returns the square of a number", "returns the cube of a number", "returns the square root of a number", "returns the factorial of a number"]}, {"inputs": "Python code:\nstring = \"hello world\"\nprint(string.upper())\n\n  choice: replaces all occurrences of one substring with another\n  choice: converts every character to lowercase\n  choice: converts every character to uppercase\n  choice: removes leading and trailing whitespace\n\nEnglish language description:", "targets": ["converts every character to uppercase"], "multiple_choice_targets": ["replaces all occurrences of one substring with another", "converts every character to lowercase", "converts every character to uppercase", "removes leading and trailing whitespace"]}, {"inputs": "Python code:\ndef is_palindrome(word):\n    return word == word[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a word is spelled correctly\n  choice: checks if a word is a palindrome\n  choice: checks if a word is a verb\n  choice: checks if a word is a noun\n\nEnglish language description:", "targets": ["checks if a word is a palindrome"], "multiple_choice_targets": ["checks if a word is spelled correctly", "checks if a word is a palindrome", "checks if a word is a verb", "checks if a word is a noun"]}, {"inputs": "Python code:\ndef add(x, y):\n    return x + y\n\nprint(add(2,3))\n\n  choice: subtracts two numbers\n  choice: multiplies two numbers\n  choice: divides two numbers\n  choice: adds two numbers\n\nEnglish language description:", "targets": ["adds two numbers"], "multiple_choice_targets": ["subtracts two numbers", "multiplies two numbers", "divides two numbers", "adds two numbers"]}, {"inputs": "Python code:\ndef remove_spaces(string):\n    return string.replace(' ', '')\n\nprint(remove_spaces('remove these spaces'))\n\n  choice: replaces all 'e' with 'a'\n  choice: removes all spaces in the string\n  choice: counts the number of vowels in the string\n  choice: reverses the order of the characters in the string\n\nEnglish language description:", "targets": ["removes all spaces in the string"], "multiple_choice_targets": ["replaces all 'e' with 'a'", "removes all spaces in the string", "counts the number of vowels in the string", "reverses the order of the characters in the string"]}, {"inputs": "Python code:\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2,num):\n        if num%i ==0:\n            return False\n    return True\n\nprint(is_prime(11))\n\n  choice: checks if a number is odd\n  choice: checks if a number is prime\n  choice: checks if a number is even\n  choice: checks if a number is negative\n\nEnglish language description:", "targets": ["checks if a number is prime"], "multiple_choice_targets": ["checks if a number is odd", "checks if a number is prime", "checks if a number is even", "checks if a number is negative"]}, {"inputs": "Python code:\ndef greet(name):\n    print(\"Hello, \" + name)\n\nname = input(\"What is your name? \") \ngreet(name)\n\n  choice: prints \"Hello, world!\" to the terminal\n  choice: prints \"Goodbye!\" to the terminal\n  choice: asks for user input and greets the user\n  choice: asks for user input and says goodbye\n\nEnglish language description:", "targets": ["asks for user input and greets the user"], "multiple_choice_targets": ["prints \"Hello, world!\" to the terminal", "prints \"Goodbye!\" to the terminal", "asks for user input and greets the user", "asks for user input and says goodbye"]}, {"inputs": "Python code:\ndef factorial(num):\n    if num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nprint(factorial(5))\n\n  choice: computes the sum of all numbers from 1 to n\n  choice: computes the factorial of a number\n  choice: computes the average of a list of numbers\n  choice: computes the product of a list of numbers\n\nEnglish language description:", "targets": ["computes the factorial of a number"], "multiple_choice_targets": ["computes the sum of all numbers from 1 to n", "computes the factorial of a number", "computes the average of a list of numbers", "computes the product of a list of numbers"]}, {"inputs": "Python code:\ndef palindrome(s):\n    return s == s[::-1]\n\nprint(palindrome(\"racecar\"))\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string is all uppercase\n  choice: checks if a string is all lowercase\n  choice: reverses a string\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string is all uppercase", "checks if a string is all lowercase", "reverses a string"]}, {"inputs": "Python code:\ndef even_numbers(n):\n    return [i for i in range(n) if i % 2 == 0]\n\nprint(even_numbers(10))\n\n  choice: returns list of even numbers from 0 to n\n  choice: returns list of odd numbers from 0 to n\n  choice: returns list of prime numbers from 0 to n\n  choice: returns list of integers divisible by 3 from 0 to n\n\nEnglish language description:", "targets": ["returns list of even numbers from 0 to n"], "multiple_choice_targets": ["returns list of even numbers from 0 to n", "returns list of odd numbers from 0 to n", "returns list of prime numbers from 0 to n", "returns list of integers divisible by 3 from 0 to n"]}, {"inputs": "Python code:\ndef largest_number(numbers):\n    return max(numbers)\n\nprint(largest_number([1, 5, 3, 9, 10]))\n\n  choice: finds the smallest number in a list\n  choice: finds the largest number in a list\n  choice: sorts a list in descending order\n  choice: returns the sum of all numbers in a list\n\nEnglish language description:", "targets": ["finds the largest number in a list"], "multiple_choice_targets": ["finds the smallest number in a list", "finds the largest number in a list", "sorts a list in descending order", "returns the sum of all numbers in a list"]}, {"inputs": "Python code:\ndef multiply(numbers):\n    result = 1\n    for n in numbers:\n        result *= n\n    return result\n\nprint(multiply([2, 3, 5]))\n\n  choice: adds all numbers in a list\n  choice: multiplies all numbers in a list\n  choice: subtracts all numbers in a list\n  choice: divides all numbers in a list\n\nEnglish language description:", "targets": ["multiplies all numbers in a list"], "multiple_choice_targets": ["adds all numbers in a list", "multiplies all numbers in a list", "subtracts all numbers in a list", "divides all numbers in a list"]}, {"inputs": "Python code:\ndef power(x, y):\n    return x ** y\n\nprint(power(2, 3))\n\n  choice: finds the square root of a number\n  choice: finds the cube root of a number\n  choice: finds the power of a number\n  choice: finds the factorial of a number\n\nEnglish language description:", "targets": ["finds the power of a number"], "multiple_choice_targets": ["finds the square root of a number", "finds the cube root of a number", "finds the power of a number", "finds the factorial of a number"]}, {"inputs": "Python code:\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\nprint(count_words(\"This is a sentence\"))\n\n  choice: counts the number of letters in a sentence\n  choice: counts the number of words in a sentence\n  choice: counts the number of vowels in a sentence\n  choice: counts the number of consonants in a sentence\n\nEnglish language description:", "targets": ["counts the number of words in a sentence"], "multiple_choice_targets": ["counts the number of letters in a sentence", "counts the number of words in a sentence", "counts the number of vowels in a sentence", "counts the number of consonants in a sentence"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n<=0:\n        return \"Incorrect input\"\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n\nprint(fibonacci(7))\n\n  choice: prints the factorial of a number\n  choice: prints the nth prime number\n  choice: prints the nth number in the Fibonacci sequence\n  choice: prints the square root of a number\n\nEnglish language description:", "targets": ["prints the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["prints the factorial of a number", "prints the nth prime number", "prints the nth number in the Fibonacci sequence", "prints the square root of a number"]}, {"inputs": "Python code:\ndef divide(x,y):\n    try:\n        result = x/y\n    except ZeroDivisionError:\n        print(\"division by zero!\")\n    else:\n        print(\"result is\", result)\n    finally:\n        print(\"executing finally clause\")\n\ndivide(4,2)\n\n  choice: divides two numbers and prints the result\n  choice: multiplies two numbers and prints the result\n  choice: prints \"division by zero!\" if y is zero\n  choice: subtracts two numbers and prints the result\n\nEnglish language description:", "targets": ["divides two numbers and prints the result"], "multiple_choice_targets": ["divides two numbers and prints the result", "multiplies two numbers and prints the result", "prints \"division by zero!\" if y is zero", "subtracts two numbers and prints the result"]}, {"inputs": "Python code:\nimport math\nprint(math.sqrt(25))\n\n  choice: prints the value of pi\n  choice: prints the square root of 25\n  choice: prints the logarithm of 10 base 2\n  choice: prints the sine of 90 degrees\n\nEnglish language description:", "targets": ["prints the square root of 25"], "multiple_choice_targets": ["prints the value of pi", "prints the square root of 25", "prints the logarithm of 10 base 2", "prints the sine of 90 degrees"]}, {"inputs": "Python code:\ndef max_num(nums):\n    max = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n    return max\n\nprint(max_num([12, 45, 67, 98, 34]))\n\n  choice: finds the minimum number in a list\n  choice: finds the maximum number in a list\n  choice: adds up all numbers in a list\n  choice: prints the length of a list\n\nEnglish language description:", "targets": ["finds the maximum number in a list"], "multiple_choice_targets": ["finds the minimum number in a list", "finds the maximum number in a list", "adds up all numbers in a list", "prints the length of a list"]}, {"inputs": "Python code:\ndef reverse_string(str):\n    return str[::-1]\n\nprint(reverse_string(\"hello\"))\n\n  choice: reverses the order of characters in a string\n  choice: capitalizes the first letter of each word in a string\n  choice: removes all whitespace from a string\n  choice: replaces a substring with another substring in a string\n\nEnglish language description:", "targets": ["reverses the order of characters in a string"], "multiple_choice_targets": ["reverses the order of characters in a string", "capitalizes the first letter of each word in a string", "removes all whitespace from a string", "replaces a substring with another substring in a string"]}, {"inputs": "Python code:\ndef remove_duplicates(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\nprint(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))\n\n  choice: removes all odd numbers from a list\n  choice: removes all even numbers from a list\n  choice: removes all negative numbers from a list\n  choice: removes duplicate numbers from a list\n\nEnglish language description:", "targets": ["removes duplicate numbers from a list"], "multiple_choice_targets": ["removes all odd numbers from a list", "removes all even numbers from a list", "removes all negative numbers from a list", "removes duplicate numbers from a list"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(\"hello\"))\n\n  choice: reverses the order of elements in a list\n  choice: reverses the order of characters in a string\n  choice: returns the first character of a string\n  choice: returns the last character of a string\n\nEnglish language description:", "targets": ["reverses the order of characters in a string"], "multiple_choice_targets": ["reverses the order of elements in a list", "reverses the order of characters in a string", "returns the first character of a string", "returns the last character of a string"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a word is spelled correctly\n  choice: checks if a word is a palindrome\n  choice: checks if a word is a noun\n  choice: checks if a word is a verb\n\nEnglish language description:", "targets": ["checks if a word is a palindrome"], "multiple_choice_targets": ["checks if a word is spelled correctly", "checks if a word is a palindrome", "checks if a word is a noun", "checks if a word is a verb"]}, {"inputs": "Python code:\ndef find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max([1,5,3,8,2]))\n\n  choice: finds the maximum value in a list\n  choice: finds the minimum value in a list\n  choice: finds the average value in a list\n  choice: finds the median value in a list\n\nEnglish language description:", "targets": ["finds the maximum value in a list"], "multiple_choice_targets": ["finds the maximum value in a list", "finds the minimum value in a list", "finds the average value in a list", "finds the median value in a list"]}, {"inputs": "Python code:\nimport math\ndef find_hypotenuse(a, b):\n    return math.sqrt(a**2 + b**2)\n\nprint(find_hypotenuse(3, 4))\n\n  choice: finds the sum of two numbers\n  choice: finds the product of two numbers\n  choice: finds the difference between two numbers\n  choice: finds the length of the hypotenuse of a right triangle given the lengths of its legs\n\nEnglish language description:", "targets": ["finds the length of the hypotenuse of a right triangle given the lengths of its legs"], "multiple_choice_targets": ["finds the sum of two numbers", "finds the length of the hypotenuse of a right triangle given the lengths of its legs", "finds the product of two numbers", "finds the difference between two numbers"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\n\nprint(remove_duplicates([1,2,3,2,1]))\n\n  choice: removes all elements from a list\n  choice: removes any duplicates from a list\n  choice: removes the first element from a list\n  choice: removes the last element from a list\n\nEnglish language description:", "targets": ["removes any duplicates from a list"], "multiple_choice_targets": ["removes all elements from a list", "removes any duplicates from a list", "removes the first element from a list", "removes the last element from a list"]}, {"inputs": "Python code:\ndef merge_lists(lst1, lst2):\n    return lst1 + lst2\n\nprint(merge_lists([1,2,3], [4,5,6]))\n\n  choice: sorts a list in ascending order\n  choice: merges two lists into one\n  choice: reverses the order of elements in a list\n  choice: removes any duplicates from a list\n\nEnglish language description:", "targets": ["merges two lists into one"], "multiple_choice_targets": ["sorts a list in ascending order", "merges two lists into one", "reverses the order of elements in a list", "removes any duplicates from a list"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\nnum = 6\nprint(\"Fibonacci sequence:\")\nfor i in range(num):\n    print(fibonacci(i))\n\n  choice: prints the first 6 even numbers\n  choice: prints the first 6 odd numbers\n  choice: prints the first 6 prime numbers\n  choice: prints the first 6 numbers in the Fibonacci sequence\n\nEnglish language description:", "targets": ["prints the first 6 numbers in the Fibonacci sequence"], "multiple_choice_targets": ["prints the first 6 even numbers", "prints the first 6 odd numbers", "prints the first 6 prime numbers", "prints the first 6 numbers in the Fibonacci sequence"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    return string[::-1]\n\nstring = \"hello world\"\nprint(reverse_string(string))\n\n  choice: returns the length of a string\n  choice: returns a string in all uppercase\n  choice: returns a string in reverse order\n  choice: returns a string with all vowels removed\n\nEnglish language description:", "targets": ["returns a string in reverse order"], "multiple_choice_targets": ["returns the length of a string", "returns a string in all uppercase", "returns a string in reverse order", "returns a string with all vowels removed"]}, {"inputs": "Python code:\ndef find_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = find_even_numbers(numbers)\nprint(even_numbers)\n\n  choice: returns all odd numbers in a list\n  choice: returns all even numbers in a list\n  choice: returns the sum of all numbers in a list\n  choice: returns the average of all numbers in a list\n\nEnglish language description:", "targets": ["returns all even numbers in a list"], "multiple_choice_targets": ["returns all odd numbers in a list", "returns all even numbers in a list", "returns the sum of all numbers in a list", "returns the average of all numbers in a list"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\nnum = 17\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")\n\n  choice: prints the first 17 prime numbers\n  choice: checks if a given number is prime or not\n  choice: prints the sum of first 17 natural numbers\n  choice: prints the first 17 even numbers\n\nEnglish language description:", "targets": ["checks if a given number is prime or not"], "multiple_choice_targets": ["prints the first 17 prime numbers", "checks if a given number is prime or not", "prints the sum of first 17 natural numbers", "prints the first 17 even numbers"]}, {"inputs": "Python code:\ndef find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)\n\n  choice: returns the difference between two lists\n  choice: returns the length of a list\n  choice: returns the sum of all numbers in a list\n  choice: returns the common elements between two lists\n\nEnglish language description:", "targets": ["returns the common elements between two lists"], "multiple_choice_targets": ["returns the difference between two lists", "returns the length of a list", "returns the sum of all numbers in a list", "returns the common elements between two lists"]}, {"inputs": "Python code:\ndef remove_duplicates(numbers):\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\nnumbers = [1, 2, 3, 1, 2, 4, 5, 4, 6, 7, 8, 7]\nunique_numbers = remove_duplicates(numbers)\nprint(unique_numbers)\n\n  choice: removes all even numbers from a list\n  choice: removes duplicates from a list\n  choice: sorts a list in descending order\n  choice: finds the minimum value in a list\n\nEnglish language description:", "targets": ["removes duplicates from a list"], "multiple_choice_targets": ["removes all even numbers from a list", "removes duplicates from a list", "sorts a list in descending order", "finds the minimum value in a list"]}, {"inputs": "Python code:\ndef factorial(n):\n    if n == 1:\n        return n\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\n  choice: prints the sum of all numbers from 1 to 5\n  choice: multiplies all numbers from 1 to 5\n  choice: prints the factorial of 5\n  choice: raises 5 to the power of 5\n\nEnglish language description:", "targets": ["prints the factorial of 5"], "multiple_choice_targets": ["prints the sum of all numbers from 1 to 5", "multiplies all numbers from 1 to 5", "prints the factorial of 5", "raises 5 to the power of 5"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n\nstring = 'hello world'\nreversed_string = reverse_string(string)\nprint(reversed_string)\n\n  choice: prints the original string\n  choice: prints the length of the string\n  choice: reverses the order of the words in the string\n  choice: reverses the order of the characters in the string\n\nEnglish language description:", "targets": ["reverses the order of the characters in the string"], "multiple_choice_targets": ["prints the original string", "prints the length of the string", "reverses the order of the words in the string", "reverses the order of the characters in the string"]}, {"inputs": "Python code:\ndef count_vowels(string):\n    vowels = 'aeiou'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nstring = 'hello world'\nvowel_count = count_vowels(string)\nprint(vowel_count)\n\n  choice: counts the number of consonants in a string\n  choice: counts the number of vowels in a string\n  choice: removes all vowels from a string\n  choice: reverses the order of the characters in a string\n\nEnglish language description:", "targets": ["counts the number of vowels in a string"], "multiple_choice_targets": ["counts the number of consonants in a string", "counts the number of vowels in a string", "removes all vowels from a string", "reverses the order of the characters in a string"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    if len(string) < 2:\n        return True\n    elif string[0] == string[-1]:\n        return is_palindrome(string[1:-1])\n    else:\n        return False\n\nstring = 'racecar'\npalindrome = is_palindrome(string)\nprint(palindrome)\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string is an anagram\n  choice: checks if a string is a pangram\n  choice: checks if a string is an isogram\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string is an anagram", "checks if a string is a pangram", "checks if a string is an isogram"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x)\nprint(result)\n\n  choice: returns the index of the largest value in an array\n  choice: returns the index of the smallest value in an array\n  choice: performs a binary search on a sorted array and returns the index of the target value\n  choice: reverses the order of an array\n\nEnglish language description:", "targets": ["performs a binary search on a sorted array and returns the index of the target value"], "multiple_choice_targets": ["returns the index of the largest value in an array", "returns the index of the smallest value in an array", "performs a binary search on a sorted array and returns the index of the target value", "reverses the order of an array"]}, {"inputs": "Python code:\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\narr = [12, 11, 13, 5, 6, 7]\nmerge_sort(arr)\nprint(arr)\n\n  choice: performs a bubble sort on an array\n  choice: performs a merge sort on an array\n  choice: performs a quick sort on an array\n  choice: sorts the array in descending order\n\nEnglish language description:", "targets": ["performs a merge sort on an array"], "multiple_choice_targets": ["performs a bubble sort on an array", "performs a merge sort on an array", "performs a quick sort on an array", "sorts the array in descending order"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string(\"hello\"))\n\n  choice: prints a string in reverse order\n  choice: computes the sum of all characters in a string\n  choice: checks if a string is a palindrome\n  choice: counts the number of vowels in a string\n\nEnglish language description:", "targets": ["prints a string in reverse order"], "multiple_choice_targets": ["prints a string in reverse order", "computes the sum of all characters in a string", "checks if a string is a palindrome", "counts the number of vowels in a string"]}, {"inputs": "Python code:\ndef multiply(x, y):\n    return x * y\n\nprint(multiply(3, 4))\n\n  choice: multiplies two numbers together\n  choice: adds two numbers together\n  choice: subtracts two numbers\n  choice: divides two numbers\n\nEnglish language description:", "targets": ["multiplies two numbers together"], "multiple_choice_targets": ["multiplies two numbers together", "adds two numbers together", "subtracts two numbers", "divides two numbers"]}, {"inputs": "Python code:\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_even(4))\n\n  choice: determines if a number is positive\n  choice: determines if a number is odd\n  choice: determines if a number is even\n  choice: determines if a number is prime\n\nEnglish language description:", "targets": ["determines if a number is even"], "multiple_choice_targets": ["determines if a number is even", "determines if a number is positive", "determines if a number is odd", "determines if a number is prime"]}, {"inputs": "Python code:\ndef calculate_area(radius):\n    PI = 3.14159\n    return PI * radius ** 2\n\nprint(calculate_area(5))\n\n  choice: calculates the area of a triangle\n  choice: calculates the volume of a sphere\n  choice: calculates the circumference of a circle\n  choice: calculates the area of a circle\n\nEnglish language description:", "targets": ["calculates the area of a circle"], "multiple_choice_targets": ["calculates the area of a circle", "calculates the circumference of a circle", "calculates the area of a triangle", "calculates the volume of a sphere"]}, {"inputs": "Python code:\ndef is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string is a pangram\n  choice: checks if a string is an acronym\n  choice: checks if a string is a palindrome and an anagram\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string is a pangram", "checks if a string is an acronym", "checks if a string is a palindrome and an anagram"]}, {"inputs": "Python code:\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\nresult1 = add(3, 4)\nresult2 = subtract(7, 2)\nprint(result1, result2)\n\n  choice: adds two numbers and subtracts the result from a third number\n  choice: multiplies two numbers together and adds a third number\n  choice: adds two numbers together and subtracts a third number\n  choice: adds two numbers together and subtracts the result from a third number\n\nEnglish language description:", "targets": ["adds two numbers together and subtracts a third number"], "multiple_choice_targets": ["adds two numbers together and subtracts a third number", "adds two numbers and subtracts the result from a third number", "multiplies two numbers together and adds a third number", "adds two numbers together and subtracts the result from a third number"]}, {"inputs": "Python code:\ndef factorial(num):\n    if num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nprint(factorial(5))\n\n  choice: calculates the sum of a list\n  choice: calculates the product of a list\n  choice: calculates the factorial of a number\n  choice: calculates the logarithm of a number\n\nEnglish language description:", "targets": ["calculates the factorial of a number"], "multiple_choice_targets": ["calculates the sum of a list", "calculates the product of a list", "calculates the factorial of a number", "calculates the logarithm of a number"]}, {"inputs": "Python code:\nimport numpy as np\n\narray = np.array([[10, 20, 30], [40, 50, 60]])\n\nprint('First row:', array[0])\nprint('Second row:', array[1])\n\n  choice: prints the array's shape\n  choice: prints the array's data type\n  choice: prints the first and second rows of the array\n  choice: prints the transpose of the array\n\nEnglish language description:", "targets": ["prints the first and second rows of the array"], "multiple_choice_targets": ["prints the array's shape", "prints the array's data type", "prints the first and second rows of the array", "prints the transpose of the array"]}, {"inputs": "Python code:\ndef is_palindrome(word):\n    if word == word[::-1]:\n        return True\n    else:\n        return False\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a word is a palindrome\n  choice: checks if a word is a verb\n  choice: checks if a word is a noun\n  choice: checks if a word is an adjective\n\nEnglish language description:", "targets": ["checks if a word is a palindrome"], "multiple_choice_targets": ["checks if a word is a verb", "checks if a word is a noun", "checks if a word is a palindrome", "checks if a word is an adjective"]}, {"inputs": "Python code:\ndef multiply_by_two(num):\n    return num * 2\n\nnumbers_list = [1, 2, 3, 4, 5]\ndoubled_numbers = list(map(multiply_by_two, numbers_list))\nprint(doubled_numbers)\n\n  choice: multiplies each number in numbers_list by 2\n  choice: returns the sum of numbers_list\n  choice: removes any duplicates from numbers_list\n  choice: prints only even numbers from numbers_list\n\nEnglish language description:", "targets": ["multiplies each number in numbers_list by 2"], "multiple_choice_targets": ["returns the sum of numbers_list", "multiplies each number in numbers_list by 2", "removes any duplicates from numbers_list", "prints only even numbers from numbers_list"]}, {"inputs": "Python code:\nimport pandas as pd\n\ndata = {'name': ['John', 'Mike', 'Sara'], 'age': [25, 32, 19], 'gender': ['M', 'M', 'F']}\ndf = pd.DataFrame(data)\nprint(df)\n\n  choice: prints the data type of df\n  choice: prints the shape of df\n  choice: prints the first 3 rows and columns of df\n  choice: prints the entire df\n\nEnglish language description:", "targets": ["prints the entire df"], "multiple_choice_targets": ["prints the data type of df", "prints the shape of df", "prints the first 3 rows and columns of df", "prints the entire df"]}, {"inputs": "Python code:\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\n\nnames_list = [\"Alice\", \"Bob\", \"Charlie\"]\nfor name in names_list:\n    greet(name)\n\n  choice: greets each name in names_list\n  choice: prints the length of names_list\n  choice: adds a new name to names_list\n  choice: removes the last name from names_list\n\nEnglish language description:", "targets": ["greets each name in names_list"], "multiple_choice_targets": ["prints the length of names_list", "adds a new name to names_list", "greets each name in names_list", "removes the last name from names_list"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n  choice: prints the nth term of the Fibonacci sequence\n  choice: returns the nth term of the Fibonacci sequence\n  choice: computes the sum of the first n terms of the Fibonacci sequence\n  choice: prints the first n terms of the Fibonacci sequence\n\nEnglish language description:", "targets": ["returns the nth term of the Fibonacci sequence"], "multiple_choice_targets": ["prints the nth term of the Fibonacci sequence", "returns the nth term of the Fibonacci sequence", "computes the sum of the first n terms of the Fibonacci sequence", "prints the first n terms of the Fibonacci sequence"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    new_string = \"\"\n    for char in string:\n        new_string = char + new_string\n    return new_string\n\nprint(reverse_string(\"hello world\"))\n\n  choice: prints a reversed string\n  choice: returns an array of characters in the string\n  choice: prints all the vowels in the string\n  choice: returns the length of the string\n\nEnglish language description:", "targets": ["prints a reversed string"], "multiple_choice_targets": ["prints a reversed string", "returns an array of characters in the string", "prints all the vowels in the string", "returns the length of the string"]}, {"inputs": "Python code:\ndef find_even_numbers(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nprint(find_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n  choice: prints all the numbers in the list\n  choice: returns an array of even numbers from the list\n  choice: computes the sum of all the numbers in the list\n  choice: returns the length of the list\n\nEnglish language description:", "targets": ["returns an array of even numbers from the list"], "multiple_choice_targets": ["prints all the numbers in the list", "returns an array of even numbers from the list", "computes the sum of all the numbers in the list", "returns the length of the list"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    string = string.lower()\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string is an anagram\n  choice: checks if a string is a pangram\n  choice: checks if a string is a homophone\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string is an anagram", "checks if a string is a pangram", "checks if a string is a homophone"]}, {"inputs": "Python code:\ndef find_largest_number(list):\n    largest_number = list[0]\n    for num in list:\n        if num > largest_number:\n            largest_number = num\n    return largest_number\n\nprint(find_largest_number([1, 5, 3, 8, 2, 9, 4]))\n\n  choice: prints the largest number in the list\n  choice: returns an array of the largest numbers in the list\n  choice: computes the sum of all the numbers in the list\n  choice: returns the length of the list\n\nEnglish language description:", "targets": ["prints the largest number in the list"], "multiple_choice_targets": ["prints the largest number in the list", "returns an array of the largest numbers in the list", "computes the sum of all the numbers in the list", "returns the length of the list"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**(0.5))+1):\n        if n % i == 0:\n            return False\n    return True\n\n  choice: checks if a number is even\n  choice: checks if a number is prime\n  choice: checks if a number is odd\n  choice: checks if a number is a perfect number\n\nEnglish language description:", "targets": ["checks if a number is prime"], "multiple_choice_targets": ["checks if a number is even", "checks if a number is prime", "checks if a number is odd", "checks if a number is a perfect number"]}, {"inputs": "Python code:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n  choice: computes the sum of n numbers\n  choice: computes the product of n numbers\n  choice: computes the average of n numbers\n  choice: computes the difference of n numbers\n\nEnglish language description:", "targets": ["computes the product of n numbers"], "multiple_choice_targets": ["computes the sum of n numbers", "computes the product of n numbers", "computes the average of n numbers", "computes the difference of n numbers"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n  choice: checks if n is a positive integer\n  choice: checks if n is a multiple of 2\n  choice: checks if n is a prime number\n  choice: checks if n is an even number\n\nEnglish language description:", "targets": ["checks if n is a prime number"], "multiple_choice_targets": ["checks if n is a positive integer", "checks if n is a multiple of 2", "checks if n is a prime number", "checks if n is an even number"]}, {"inputs": "Python code:\ndef find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nlst = [5, 10, 2, 8, 23]\nprint(find_max(lst))\n\n  choice: finds the minimum value in lst\n  choice: finds the maximum value in lst\n  choice: computes the average of lst\n  choice: returns the length of lst\n\nEnglish language description:", "targets": ["finds the maximum value in lst"], "multiple_choice_targets": ["finds the minimum value in lst", "finds the maximum value in lst", "computes the average of lst", "returns the length of lst"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\n\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(remove_duplicates(lst))\n\n  choice: removes all even numbers from lst\n  choice: removes all odd numbers from lst\n  choice: removes all duplicates from lst\n  choice: removes the first element from lst\n\nEnglish language description:", "targets": ["removes all duplicates from lst"], "multiple_choice_targets": ["removes all even numbers from lst", "removes all odd numbers from lst", "removes all duplicates from lst", "removes the first element from lst"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string is in alphabetical order\n  choice: checks if a string is all uppercase\n  choice: checks if a string is a number\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string is in alphabetical order", "checks if a string is all uppercase", "checks if a string is a number"]}, {"inputs": "Python code:\ndef bubble_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n\nlst = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(lst)\nprint(lst)\n\n  choice: sorts lst in ascending order\n  choice: sorts lst in descending order\n  choice: reverses the order of lst\n  choice: does not modify lst\n\nEnglish language description:", "targets": ["sorts lst in ascending order"], "multiple_choice_targets": ["sorts lst in ascending order", "sorts lst in descending order", "reverses the order of lst", "does not modify lst"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string\n\nstring = \"hello world\"\nreversed_string = reverse_string(string)\nprint(reversed_string)\n\n  choice: counts the number of characters in a string\n  choice: removes all spaces from a string\n  choice: reverses the order of the characters in a string\n  choice: capitalizes the first letter of each word in a string\n\nEnglish language description:", "targets": ["reverses the order of the characters in a string"], "multiple_choice_targets": ["counts the number of characters in a string", "removes all spaces from a string", "reverses the order of the characters in a string", "capitalizes the first letter of each word in a string"]}, {"inputs": "Python code:\ndef bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(numbers)\nprint(numbers)\n\n  choice: sorts a list of numbers in ascending order\n  choice: sorts a list of numbers in descending order\n  choice: removes duplicates from a list\n  choice: returns the maximum value in a list\n\nEnglish language description:", "targets": ["sorts a list of numbers in ascending order"], "multiple_choice_targets": ["sorts a list of numbers in ascending order", "sorts a list of numbers in descending order", "removes duplicates from a list", "returns the maximum value in a list"]}, {"inputs": "Python code:\ndef remove_duplicates(numbers):\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\nnumbers = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nunique_numbers = remove_duplicates(numbers)\nprint(unique_numbers)\n\n  choice: sorts a list of numbers in ascending order\n  choice: sorts a list of numbers in descending order\n  choice: removes duplicates from a list\n  choice: returns the maximum value in a list\n\nEnglish language description:", "targets": ["removes duplicates from a list"], "multiple_choice_targets": ["sorts a list of numbers in ascending order", "sorts a list of numbers in descending order", "removes duplicates from a list", "returns the maximum value in a list"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\nstring = \"racecar\"\npalindrome = is_palindrome(string)\nprint(palindrome)\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string contains only vowels\n  choice: checks if a string contains only consonants\n  choice: checks if a string is a pangram\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string contains only vowels", "checks if a string contains only consonants", "checks if a string is a pangram"]}, {"inputs": "Python code:\ndef calculate_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)\n\nnum = 5\nfactorial = calculate_factorial(num)\nprint(factorial)\n\n  choice: calculates the sum of all numbers from 1 to n\n  choice: calculates the product of all even numbers from 1 to n\n  choice: calculates the product of all odd numbers from 1 to n\n  choice: calculates the factorial of n\n\nEnglish language description:", "targets": ["calculates the factorial of n"], "multiple_choice_targets": ["calculates the sum of all numbers from 1 to n", "calculates the product of all even numbers from 1 to n", "calculates the product of all odd numbers from 1 to n", "calculates the factorial of n"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid-1, x)\n        else:\n            return binary_search(arr, mid+1, high, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\nindex = binary_search(arr, 0, len(arr)-1, x)\nprint(index)\n\n  choice: finds the index of the maximum value in a list\n  choice: sorts a list of numbers in ascending order\n  choice: removes duplicates from a list\n  choice: searches for an element in a sorted list using binary search\n\nEnglish language description:", "targets": ["searches for an element in a sorted list using binary search"], "multiple_choice_targets": ["finds the index of the maximum value in a list", "sorts a list of numbers in ascending order", "removes duplicates from a list", "searches for an element in a sorted list using binary search"]}, {"inputs": "Python code:\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\nresult = binary_search(arr, x)\nif result != -1:\n    print(\"Element is present at index\", result)\nelse:\n    print(\"Element is not present in array\")\n\n  choice: finds the largest number in an array\n  choice: reverses an array\n  choice: searches for a specific element in a sorted array\n  choice: sorts an array in descending order\n\nEnglish language description:", "targets": ["searches for a specific element in a sorted array"], "multiple_choice_targets": ["sorts an array in descending order", "reverses an array", "searches for a specific element in a sorted array", "finds the largest number in an array"]}, {"inputs": "Python code:\ndef is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\n\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"hello world\"))\n\n  choice: checks if a string is a palindrome\n  choice: counts the number of vowels in a string\n  choice: removes all vowels from a string\n  choice: capitalizes the first letter of every word in a string\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["capitalizes the first letter of every word in a string", "removes all vowels from a string", "checks if a string is a palindrome", "counts the number of vowels in a string"]}, {"inputs": "Python code:\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(60,48))\n\n  choice: prints the sum of two numbers\n  choice: prints the difference of two numbers\n  choice: prints the greatest common divisor of two numbers\n  choice: prints the least common multiple of two numbers\n\nEnglish language description:", "targets": ["prints the greatest common divisor of two numbers"], "multiple_choice_targets": ["prints the sum of two numbers", "prints the difference of two numbers", "prints the greatest common divisor of two numbers", "prints the least common multiple of two numbers"]}, {"inputs": "Python code:\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\narr = [12, 11, 13, 5, 6, 7]\nmerge_sort(arr)\nprint(arr)\n\n  choice: sorts a list of numbers in ascending order using merge sort algorithm\n  choice: searches for a specific element in a sorted array\n  choice: removes duplicates from a list\n  choice: returns the maximum value in a list\n\nEnglish language description:", "targets": ["sorts a list of numbers in ascending order using merge sort algorithm"], "multiple_choice_targets": ["returns the maximum value in a list", "removes duplicates from a list", "sorts a list of numbers in ascending order using merge sort algorithm", "searches for a specific element in a sorted array"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\nresult = linear_search(arr, x)\nif result != -1:\n    print(\"Element is present at index\", result)\nelse:\n    print(\"Element is not present in array\")\n\n  choice: sorts an array in ascending order\n  choice: finds the largest number in an array\n  choice: searches for a specific element in an unsorted array\n  choice: calculates the average of all numbers in an array\n\nEnglish language description:", "targets": ["searches for a specific element in an unsorted array"], "multiple_choice_targets": ["sorts an array in ascending order", "finds the largest number in an array", "searches for a specific element in an unsorted array", "calculates the average of all numbers in an array"]}, {"inputs": "Python code:\ndef binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal('1011'))\n\n  choice: converts a decimal number to binary\n  choice: converts a hexadecimal number to decimal\n  choice: converts a binary number to decimal\n  choice: converts an octal number to decimal\n\nEnglish language description:", "targets": ["converts a binary number to decimal"], "multiple_choice_targets": ["converts a decimal number to binary", "converts a hexadecimal number to decimal", "converts a binary number to decimal", "converts an octal number to decimal"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(9))\n\n  choice: calculates the factorial of a number\n  choice: finds the greatest common divisor of two numbers\n  choice: finds the nth number in the Fibonacci sequence\n  choice: calculates the square root of a number\n\nEnglish language description:", "targets": ["finds the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["calculates the factorial of a number", "finds the greatest common divisor of two numbers", "finds the nth number in the Fibonacci sequence", "calculates the square root of a number"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint(arr)\n\n  choice: sorts an array in descending order\n  choice: sorts an array in ascending order\n  choice: finds the largest number in an array\n  choice: searches for a specific element in an unsorted array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in descending order", "sorts an array in ascending order", "finds the largest number in an array", "searches for a specific element in an unsorted array"]}, {"inputs": "Python code:\ndef find_max(numbers):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max([2, 7, 3, 9, 4]))\n\n  choice: calculates the sum of all numbers in a list\n  choice: finds the average of all numbers in a list\n  choice: multiplies all numbers in a list\n  choice: finds the largest number in a list\n\nEnglish language description:", "targets": ["finds the largest number in a list"], "multiple_choice_targets": ["calculates the sum of all numbers in a list", "finds the average of all numbers in a list", "multiplies all numbers in a list", "finds the largest number in a list"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid-1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index\", result)\nelse:\n    print(\"Element is not present in array\")\n\n  choice: sorts an array in descending order\n  choice: finds the largest number in an array\n  choice: searches for a specific element in a sorted array\n  choice: calculates the average of all numbers in an array\n\nEnglish language description:", "targets": ["searches for a specific element in a sorted array"], "multiple_choice_targets": ["sorts an array in descending order", "finds the largest number in an array", "searches for a specific element in a sorted array", "calculates the average of all numbers in an array"]}, {"inputs": "Python code:\ndef count_vowels(word):\n    vowels = \"aeiou\"\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(count_vowels(\"hello\"))\n\n  choice: counts the number of consonants in a word\n  choice: counts the number of vowels in a word\n  choice: checks if a word is a palindrome\n  choice: checks if a word is an adjective\n\nEnglish language description:", "targets": ["counts the number of vowels in a word"], "multiple_choice_targets": ["counts the number of consonants in a word", "counts the number of vowels in a word", "checks if a word is a palindrome", "checks if a word is an adjective"]}, {"inputs": "Python code:\ndef reverse_list(arr):\n    return arr[::-1]\n\nprint(reverse_list([1, 2, 3, 4, 5]))\n\n  choice: sorts a list in ascending order\n  choice: sorts a list in descending order\n  choice: reverses a list\n  choice: shuffles a list randomly\n\nEnglish language description:", "targets": ["reverses a list"], "multiple_choice_targets": ["sorts a list in ascending order", "sorts a list in descending order", "reverses a list", "shuffles a list randomly"]}, {"inputs": "Python code:\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_even(7))\n\n  choice: checks if a number is even\n  choice: checks if a number is odd\n  choice: checks if a number is prime\n  choice: checks if a number is negative\n\nEnglish language description:", "targets": ["checks if a number is odd"], "multiple_choice_targets": ["checks if a number is even", "checks if a number is odd", "checks if a number is prime", "checks if a number is negative"]}, {"inputs": "Python code:\ndef find_largest(arr):\n    largest = arr[0]\n    for i in range(len(arr)):\n        if largest < arr[i]:\n            largest = arr[i]\n    return largest\n\nprint(find_largest([1, 4, 6, 8, 3]))\n\n  choice: finds the smallest element in a list\n  choice: finds the largest element in a list\n  choice: sorts a list in ascending order\n  choice: returns a reversed list\n\nEnglish language description:", "targets": ["finds the largest element in a list"], "multiple_choice_targets": ["finds the smallest element in a list", "finds the largest element in a list", "sorts a list in ascending order", "returns a reversed list"]}, {"inputs": "Python code:\ndef add(a, b):\n    return a + b\n\nprint(add(4, 5))\n\n  choice: subtracts two numbers\n  choice: multiplies two numbers\n  choice: adds two numbers\n  choice: divides two numbers\n\nEnglish language description:", "targets": ["adds two numbers"], "multiple_choice_targets": ["subtracts two numbers", "multiplies two numbers", "adds two numbers", "divides two numbers"]}, {"inputs": "Python code:\ndef is_palindrome(word):\n    return word == word[::-1]\n\nprint(is_palindrome('racecar'))\n\n  choice: checks if a word is a palindrome\n  choice: counts the number of vowels in a word\n  choice: capitalizes the first letter of a word\n  choice: reverses the order of the letters in a word\n\nEnglish language description:", "targets": ["checks if a word is a palindrome"], "multiple_choice_targets": ["checks if a word is a palindrome", "counts the number of vowels in a word", "capitalizes the first letter of a word", "reverses the order of the letters in a word"]}, {"inputs": "Python code:\ndef multiply_list(arr):\n    result = 1\n    for i in arr:\n        result *= i\n    return result\n\nprint(multiply_list([2, 3, 4]))\n\n  choice: finds the sum of elements in a list\n  choice: multiplies all elements in a list\n  choice: finds the average of elements in a list\n  choice: sorts a list in ascending order\n\nEnglish language description:", "targets": ["multiplies all elements in a list"], "multiple_choice_targets": ["finds the sum of elements in a list", "multiplies all elements in a list", "finds the average of elements in a list", "sorts a list in ascending order"]}, {"inputs": "Python code:\nstring = \"hello world\"\nfor c in string:\n    print(c)\n\n  choice: prints each character of a string in a new line\n  choice: concatenates two strings\n  choice: reverses a string\n  choice: removes whitespaces from a string\n\nEnglish language description:", "targets": ["prints each character of a string in a new line"], "multiple_choice_targets": ["prints each character of a string in a new line", "concatenates two strings", "reverses a string", "removes whitespaces from a string"]}, {"inputs": "Python code:\ndef is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string is an anagram\n  choice: checks if a string is a palindrome or anagram\n  choice: checks if a string is a vowel\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string is an anagram", "checks if a string is a palindrome or anagram", "checks if a string is a vowel"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n  choice: computes the factorial of a number\n  choice: computes the nth Fibonacci number\n  choice: computes the square root of a number\n  choice: computes the sum of digits in a number\n\nEnglish language description:", "targets": ["computes the nth Fibonacci number"], "multiple_choice_targets": ["computes the factorial of a number", "computes the nth Fibonacci number", "computes the square root of a number", "computes the sum of digits in a number"]}, {"inputs": "Python code:\ndef remove_duplicates(numbers):\n    return set(numbers)\n\nprint(remove_duplicates([1, 2, 3, 2, 4, 5]))\n\n  choice: removes duplicates from a list\n  choice: sorts a list in ascending order\n  choice: removes duplicates and sorts a list in ascending order\n  choice: finds the maximum number in a list\n\nEnglish language description:", "targets": ["removes duplicates from a list"], "multiple_choice_targets": ["removes duplicates from a list", "sorts a list in ascending order", "removes duplicates and sorts a list in ascending order", "finds the maximum number in a list"]}, {"inputs": "Python code:\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\n  choice: performs a linear search on a list\n  choice: performs a binary search on a sorted list\n  choice: performs a bubble sort on a list\n  choice: performs a quick sort on a list\n\nEnglish language description:", "targets": ["performs a binary search on a sorted list"], "multiple_choice_targets": ["performs a linear search on a list", "performs a binary search on a sorted list", "performs a bubble sort on a list", "performs a quick sort on a list"]}, {"inputs": "Python code:\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\nprint(count_words(\"The quick brown fox jumps over the lazy dog.\"))\n\n  choice: counts the number of words in a sentence\n  choice: counts the number of vowels in a sentence\n  choice: converts a sentence to uppercase\n  choice: removes spaces from a sentence\n\nEnglish language description:", "targets": ["counts the number of words in a sentence"], "multiple_choice_targets": ["counts the number of words in a sentence", "counts the number of vowels in a sentence", "converts a sentence to uppercase", "removes spaces from a sentence"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nprint(bubble_sort([5, 2, 1, 3, 6, 4]))\n\n  choice: sorts a list in descending order\n  choice: sorts a list using insertion sort\n  choice: sorts a list using merge sort\n  choice: sorts a list using bubble sort\n\nEnglish language description:", "targets": ["sorts a list using bubble sort"], "multiple_choice_targets": ["sorts a list in descending order", "sorts a list using insertion sort", "sorts a list using merge sort", "sorts a list using bubble sort"]}, {"inputs": "Python code:\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        if arr[mid] < x:\n            low = mid + 1\n\n        elif arr[mid] > x:\n            high = mid - 1\n\n        else:\n            return mid\n\n    return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\n\nresult = binary_search(arr, x)\n\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n\n  choice: sorts the given array in ascending order\n  choice: finds the maximum element in the given array\n  choice: searches for a given element in a sorted array using binary search algorithm\n  choice: prints the reverse of the given array\n\nEnglish language description:", "targets": ["searches for a given element in a sorted array using binary search algorithm"], "multiple_choice_targets": ["sorts the given array in ascending order", "finds the maximum element in the given array", "searches for a given element in a sorted array using binary search algorithm", "prints the reverse of the given array"]}, {"inputs": "Python code:\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\narr = [12, 11, 13, 5, 6, 7]\nmerge_sort(arr)\nprint(\"Sorted array is:\")\nfor i in range(len(arr)):\n    print(arr[i])\n\n  choice: sorts the given array using bubble sort algorithm\n  choice: sorts the given array using merge sort algorithm\n  choice: finds the maximum element in the given array\n  choice: prints the reverse of the given array\n\nEnglish language description:", "targets": ["sorts the given array using merge sort algorithm"], "multiple_choice_targets": ["sorts the given array using bubble sort algorithm", "sorts the given array using merge sort algorithm", "finds the maximum element in the given array", "prints the reverse of the given array"]}, {"inputs": "Python code:\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        left = []\n        right = []\n        for i in arr[1:]:\n            if i < pivot:\n                left.append(i)\n            else:\n                right.append(i)\n        return quick_sort(left) + [pivot] + quick_sort(right)\n\narr = [10, 7, 8, 9, 1, 5]\nprint(\"Sorted array is:\")\nprint(quick_sort(arr))\n\n  choice: sorts the given array using bubble sort algorithm\n  choice: sorts the given array using quick sort algorithm\n  choice: finds the minimum element in the given array\n  choice: prints the reverse of the given array\n\nEnglish language description:", "targets": ["sorts the given array using quick sort algorithm"], "multiple_choice_targets": ["sorts the given array using bubble sort algorithm", "sorts the given array using quick sort algorithm", "finds the minimum element in the given array", "prints the reverse of the given array"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [4, 2, 7, 9, 11]\nx = 7\n\nresult = linear_search(arr,x)\nif result != -1:\n    print(\"Element is present at index\",result)\nelse:\n    print(\"Element is not present in array\")\n\n  choice: sorts the given array using insertion sort algorithm\n  choice: searches for a given element in an unsorted array using linear search algorithm\n  choice: finds the maximum element in the given array\n  choice: prints the reverse of the given array\n\nEnglish language description:", "targets": ["searches for a given element in an unsorted array using linear search algorithm"], "multiple_choice_targets": ["sorts the given array using insertion sort algorithm", "searches for a given element in an unsorted array using linear search algorithm", "finds the maximum element in the given array", "prints the reverse of the given array"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]),\n\n  choice: sorts the given array using selection sort algorithm\n  choice: sorts the given array using bubble sort algorithm\n  choice: finds the minimum element in the given array\n  choice: prints the reverse of the given array\n\nEnglish language description:", "targets": ["sorts the given array using bubble sort algorithm"], "multiple_choice_targets": ["sorts the given array using selection sort algorithm", "sorts the given array using bubble sort algorithm", "finds the minimum element in the given array", "prints the reverse of the given array"]}, {"inputs": "Python code:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >=0 and key < arr[j] :\n                arr[j+1] = arr[j]\n                j -= 1\n        arr[j+1] = key\n\narr = [12, 11, 13, 5, 6]\ninsertion_sort(arr)\nfor i in range(len(arr)):\n    print('%d' % arr[i]),\n\n  choice: sorts the given array using insertion sort algorithm\n  choice: sorts the given array using bubble sort algorithm\n  choice: finds the maximum element in the given array\n  choice: prints the reverse of the given array\n\nEnglish language description:", "targets": ["sorts the given array using insertion sort algorithm"], "multiple_choice_targets": ["sorts the given array using insertion sort algorithm", "sorts the given array using bubble sort algorithm", "finds the maximum element in the given array", "prints the reverse of the given array"]}, {"inputs": "Python code:\ndef calculate_area(radius):\n    area = 3.14 * radius ** 2\n    return area\n\nprint(calculate_area(5))\n\n  choice: calculates the circumference of a circle\n  choice: calculates the area of a circle\n  choice: calculates the perimeter of a square\n  choice: calculates the diagonal of a square\n\nEnglish language description:", "targets": ["calculates the area of a circle"], "multiple_choice_targets": ["calculates the circumference of a circle", "calculates the area of a circle", "calculates the perimeter of a square", "calculates the diagonal of a square"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\nprint(fibonacci(7))\n\n  choice: prints the nth prime number\n  choice: prints the sum of first n natural numbers\n  choice: prints the nth Fibonacci number\n  choice: prints the sum of first n even numbers\n\nEnglish language description:", "targets": ["prints the nth Fibonacci number"], "multiple_choice_targets": ["prints the nth Fibonacci number", "prints the nth prime number", "prints the sum of first n natural numbers", "prints the sum of first n even numbers"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    reverse_string = string[::-1]\n    if string == reverse_string:\n        return True\n    else:\n        return False\n\nprint(is_palindrome('racecar'))\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string is a pangram\n  choice: checks if a string is a permutation of another string\n  choice: checks if a string is a substring of another string\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string is a pangram", "checks if a string is a permutation of another string", "checks if a string is a substring of another string"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint('Sorted array:',arr)\n\n  choice: sorts the array in ascending order\n  choice: sorts the array in descending order\n  choice: reverses the array\n  choice: does not modify the original array\n\nEnglish language description:", "targets": ["sorts the array in ascending order"], "multiple_choice_targets": ["sorts the array in ascending order", "sorts the array in descending order", "reverses the array", "does not modify the original array"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x)\nif result != -1:\n    print('Element is present at index', str(result))\nelse:\n    print('Element is not present in array')\n\n  choice: searches for an element in an unsorted array\n  choice: searches for an element in a sorted array\n  choice: inserts an element into a sorted array\n  choice: deletes an element from a sorted array\n\nEnglish language description:", "targets": ["searches for an element in a sorted array"], "multiple_choice_targets": ["searches for an element in a sorted array", "searches for an element in an unsorted array", "inserts an element into a sorted array", "deletes an element from a sorted array"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [1, 5, 3, 8, 6]\nx = 8\nresult = linear_search(arr, x)\nif result != -1:\n    print('Element is present at index', str(result))\nelse:\n    print('Element is not present in array')\n\n  choice: searches for an element in a sorted array\n  choice: searches for an element in an unsorted array\n  choice: inserts an element into an unsorted array\n  choice: deletes an element from an unsorted array\n\nEnglish language description:", "targets": ["searches for an element in an unsorted array"], "multiple_choice_targets": ["searches for an element in an unsorted array", "searches for an element in a sorted array", "inserts an element into an unsorted array", "deletes an element from an unsorted array"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\nprint(fibonacci(6))\n\n  choice: computes the factorial of a number\n  choice: computes the nth Fibonacci number\n  choice: computes the power of a number\n  choice: computes the square root of a number\n\nEnglish language description:", "targets": ["computes the nth Fibonacci number"], "multiple_choice_targets": ["computes the factorial of a number", "computes the nth Fibonacci number", "computes the power of a number", "computes the square root of a number"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\n\nprint(remove_duplicates([1,2,3,4,2,3,1,4]))\n\n  choice: removes all the odd numbers from the list\n  choice: removes all the even numbers from the list\n  choice: removes duplicates from the list\n  choice: sorts the list in ascending order\n\nEnglish language description:", "targets": ["removes duplicates from the list"], "multiple_choice_targets": ["removes all the odd numbers from the list", "removes all the even numbers from the list", "removes duplicates from the list", "sorts the list in ascending order"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    return string == string[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: returns True if the string is a palindrome\n  choice: checks if a string contains only numbers\n  choice: returns the length of the string\n  choice: checks if a string is uppercase\n\nEnglish language description:", "targets": ["returns True if the string is a palindrome"], "multiple_choice_targets": ["returns True if the string is a palindrome", "checks if a string contains only numbers", "returns the length of the string", "checks if a string is uppercase"]}, {"inputs": "Python code:\ndef count_vowels(string):\n    vowels = \"aeiou\"\n    count = 0\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\nprint(count_vowels(\"Hello World\"))\n\n  choice: counts the number of consonants in a string\n  choice: counts the number of vowels in a string\n  choice: returns the reverse of a string\n  choice: converts all the letters in a string to lowercase\n\nEnglish language description:", "targets": ["counts the number of vowels in a string"], "multiple_choice_targets": ["counts the number of consonants in a string", "counts the number of vowels in a string", "returns the reverse of a string", "converts all the letters in a string to lowercase"]}, {"inputs": "Python code:\ndef find_largest(lst):\n    largest = lst[0]\n    for item in lst:\n        if item > largest:\n            largest = item\n    return largest\n\nprint(find_largest([3, 5, 2, 8, 1]))\n\n  choice: finds the smallest number in a list\n  choice: finds the largest number in a list\n  choice: sorts the list in descending order\n  choice: reverses the list\n\nEnglish language description:", "targets": ["finds the largest number in a list"], "multiple_choice_targets": ["finds the smallest number in a list", "finds the largest number in a list", "sorts the list in descending order", "reverses the list"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(17))\n\n  choice: checks if a number is even or odd\n  choice: checks if a number is a prime number\n  choice: checks if a number is positive or negative\n  choice: computes the square of a number\n\nEnglish language description:", "targets": ["checks if a number is a prime number"], "multiple_choice_targets": ["checks if a number is even or odd", "checks if a number is a prime number", "checks if a number is positive or negative", "computes the square of a number"]}, {"inputs": "Python code:\ndef find_max(numbers):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max([1, 5, 3, 2, 4]))\n\n  choice: finds the minimum number in a list\n  choice: finds the maximum number in a list\n  choice: sorts a list in ascending order\n  choice: calculates the average of a list\n\nEnglish language description:", "targets": ["finds the maximum number in a list"], "multiple_choice_targets": ["finds the minimum number in a list", "finds the maximum number in a list", "sorts a list in ascending order", "calculates the average of a list"]}, {"inputs": "Python code:\ndef is_palindrome(word):\n    return word == word[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a word is a palindrome\n  choice: checks if a word is an anagram\n  choice: checks if a word is in alphabetical order\n  choice: checks if a word is a homophone\n\nEnglish language description:", "targets": ["checks if a word is a palindrome"], "multiple_choice_targets": ["checks if a word is a palindrome", "checks if a word is an anagram", "checks if a word is in alphabetical order", "checks if a word is a homophone"]}, {"inputs": "Python code:\ndef count_vowels(word):\n    vowels = \"aeiou\"\n    count = 0\n    for letter in word:\n        if letter.lower() in vowels:\n            count += 1\n    return count\n\nprint(count_vowels(\"hello\"))\n\n  choice: counts the number of vowels in a word\n  choice: counts the number of consonants in a word\n  choice: checks if a word is a palindrome\n  choice: checks if a word is an anagram\n\nEnglish language description:", "targets": ["counts the number of vowels in a word"], "multiple_choice_targets": ["counts the number of vowels in a word", "counts the number of consonants in a word", "checks if a word is a palindrome", "checks if a word is an anagram"]}, {"inputs": "Python code:\ndef fizzbuzz(n):\n    for i in range(1, n+1):\n        if i % 15 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\n  choice: prints numbers from 1 to n\n  choice: prints \"Fizz\" for multiples of 3, \"Buzz\" for multiples of 5, and \"FizzBuzz\" for multiples of both 3 and 5\n  choice: prints all prime numbers up to n\n  choice: calculates the factorial of n\n\nEnglish language description:", "targets": ["prints \"Fizz\" for multiples of 3, \"Buzz\" for multiples of 5, and \"FizzBuzz\" for multiples of both 3 and 5"], "multiple_choice_targets": ["prints numbers from 1 to n", "prints \"Fizz\" for multiples of 3, \"Buzz\" for multiples of 5, and \"FizzBuzz\" for multiples of both 3 and 5", "prints all prime numbers up to n", "calculates the factorial of n"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(11))\n\n  choice: checks if a number is prime\n  choice: checks if a number is even\n  choice: calculates the nth Fibonacci number\n  choice: calculates the factorial of a number\n\nEnglish language description:", "targets": ["checks if a number is prime"], "multiple_choice_targets": ["checks if a number is prime", "checks if a number is even", "calculates the nth Fibonacci number", "calculates the factorial of a number"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n  choice: performs a binary search on a sorted list\n  choice: performs a linear search on a list\n  choice: performs a bubble sort on a list\n  choice: performs a quick sort on a list\n\nEnglish language description:", "targets": ["performs a linear search on a list"], "multiple_choice_targets": ["performs a binary search on a sorted list", "performs a linear search on a list", "performs a bubble sort on a list", "performs a quick sort on a list"]}, {"inputs": "Python code:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\n  choice: returns the square of a number\n  choice: returns the factorial of a number\n  choice: returns the cube of a number\n  choice: returns the absolute value of a number\n\nEnglish language description:", "targets": ["returns the factorial of a number"], "multiple_choice_targets": ["returns the square of a number", "returns the factorial of a number", "returns the cube of a number", "returns the absolute value of a number"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(\"hello\"))\n\n  choice: prints the length of a string\n  choice: converts a string to lowercase\n  choice: removes vowels from a string\n  choice: reverses a string\n\nEnglish language description:", "targets": ["reverses a string"], "multiple_choice_targets": ["prints the length of a string", "converts a string to lowercase", "removes vowels from a string", "reverses a string"]}, {"inputs": "Python code:\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    mid = 0\n\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n\n    return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\n\nresult = binary_search(arr, x)\n\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n\n  choice: performs a linear search on an array\n  choice: performs a binary search on an array\n  choice: sorts an array in ascending order\n  choice: reverses an array\n\nEnglish language description:", "targets": ["performs a binary search on an array"], "multiple_choice_targets": ["performs a linear search on an array", "performs a binary search on an array", "sorts an array in ascending order", "reverses an array"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(9))\n\n  choice: returns the nth prime number\n  choice: returns the sum of first n prime numbers\n  choice: returns the nth Fibonacci number\n  choice: returns the sum of first n Fibonacci numbers\n\nEnglish language description:", "targets": ["returns the nth Fibonacci number"], "multiple_choice_targets": ["returns the nth prime number", "returns the sum of first n prime numbers", "returns the nth Fibonacci number", "returns the sum of first n Fibonacci numbers"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\n\nbubble_sort(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]),\n\n  choice: performs a linear search on an array\n  choice: performs a binary search on an array\n  choice: sorts an array in ascending order using bubble sort\n  choice: sorts an array in descending order using bubble sort\n\nEnglish language description:", "targets": ["sorts an array in ascending order using bubble sort"], "multiple_choice_targets": ["performs a linear search on an array", "performs a binary search on an array", "sorts an array in ascending order using bubble sort", "sorts an array in descending order using bubble sort"]}, {"inputs": "Python code:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j] :\n                arr[j + 1] = arr[j]\n                j -= 1\n        arr[j + 1] = key\n\narr = [12, 11, 13, 5, 6]\ninsertion_sort(arr)\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i])\n\n  choice: performs a linear search on an array\n  choice: performs a binary search on an array\n  choice: sorts an array in ascending order using insertion sort\n  choice: sorts an array in descending order using insertion sort\n\nEnglish language description:", "targets": ["sorts an array in ascending order using insertion sort"], "multiple_choice_targets": ["performs a linear search on an array", "performs a binary search on an array", "sorts an array in ascending order using insertion sort", "sorts an array in descending order using insertion sort"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string(\"hello\"))\n\n  choice: reverses a list\n  choice: reverses a string\n  choice: sorts a list in descending order\n  choice: sorts a list in ascending order\n\nEnglish language description:", "targets": ["reverses a string"], "multiple_choice_targets": ["sorts a list in ascending order", "reverses a list", "sorts a list in descending order", "reverses a string"]}, {"inputs": "Python code:\ndef calculate_area(length, width):\n    return length * width\n\nprint(calculate_area(4, 5))\n\n  choice: calculates the volume of a cube\n  choice: calculates the area of a rectangle\n  choice: calculates the circumference of a circle\n  choice: calculates the area of a triangle\n\nEnglish language description:", "targets": ["calculates the area of a rectangle"], "multiple_choice_targets": ["calculates the area of a rectangle", "calculates the circumference of a circle", "calculates the area of a triangle", "calculates the volume of a cube"]}, {"inputs": "Python code:\ndef greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"Alice\")\n\n  choice: says goodbye to a person\n  choice: greets a person\n  choice: thanks a person\n  choice: insults a person\n\nEnglish language description:", "targets": ["greets a person"], "multiple_choice_targets": ["says goodbye to a person", "greets a person", "thanks a person", "insults a person"]}, {"inputs": "Python code:\ndef find_average(lst):\n    total = sum(lst)\n    count = len(lst)\n    return total / count\n\nprint(find_average([1,2,3,4,5]))\n\n  choice: finds the maximum value in a list\n  choice: finds the minimum value in a list\n  choice: finds the average value in a list\n  choice: finds the median value in a list\n\nEnglish language description:", "targets": ["finds the average value in a list"], "multiple_choice_targets": ["finds the maximum value in a list", "finds the minimum value in a list", "finds the average value in a list", "finds the median value in a list"]}, {"inputs": "Python code:\ndef find_duplicates(lst):\n    duplicates = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j] and lst[i] not in duplicates:\n                duplicates.append(lst[i])\n    return duplicates\n\nprint(find_duplicates([1,2,3,2,5,6,6]))\n\n  choice: finds all numbers greater than 5 in a list\n  choice: finds all even numbers in a list\n  choice: finds all duplicates in a list\n  choice: finds all odd numbers in a list\n\nEnglish language description:", "targets": ["finds all duplicates in a list"], "multiple_choice_targets": ["finds all numbers greater than 5 in a list", "finds all even numbers in a list", "finds all duplicates in a list", "finds all odd numbers in a list"]}, {"inputs": "Python code:\ndef reverse_list(lst):\n    return lst[::-1]\n\nprint(reverse_list([1,2,3,4,5]))\n\n  choice: reverses a list\n  choice: sorts a list in descending order\n  choice: sorts a list in ascending order\n  choice: adds all numbers in a list\n\nEnglish language description:", "targets": ["reverses a list"], "multiple_choice_targets": ["sorts a list in ascending order", "reverses a list", "sorts a list in descending order", "adds all numbers in a list"]}, {"inputs": "Python code:\ndef calculate_sum(num):\n    if num <= 0:\n        return 0\n    else:\n        return num + calculate_sum(num-1)\n\nprint(calculate_sum(10))\n\n  choice: prints the factorial of 10\n  choice: prints the sum of all even numbers from 0 to 10\n  choice: prints the sum of all odd numbers from 0 to 10\n  choice: prints the sum of all numbers from 1 to 10\n\nEnglish language description:", "targets": ["prints the sum of all numbers from 1 to 10"], "multiple_choice_targets": ["prints the factorial of 10", "prints the sum of all even numbers from 0 to 10", "prints the sum of all odd numbers from 0 to 10", "prints the sum of all numbers from 1 to 10"]}, {"inputs": "Python code:\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(11))\n\n  choice: checks if a number is even\n  choice: checks if a number is prime\n  choice: checks if a number is divisible by 3\n  choice: checks if a number is positive\n\nEnglish language description:", "targets": ["checks if a number is prime"], "multiple_choice_targets": ["checks if a number is even", "checks if a number is prime", "checks if a number is divisible by 3", "checks if a number is positive"]}, {"inputs": "Python code:\ndef factorial(n):\n    if n == 1:\n        return n\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\n  choice: prints the sum of all numbers from 1 to 5\n  choice: prints the factorial of 5\n  choice: prints the largest number in a list of 5 elements\n  choice: checks if a string is a palindrome\n\nEnglish language description:", "targets": ["prints the factorial of 5"], "multiple_choice_targets": ["prints the sum of all numbers from 1 to 5", "prints the factorial of 5", "prints the largest number in a list of 5 elements", "checks if a string is a palindrome"]}, {"inputs": "Python code:\ndef calculate_average(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum / len(list)\n\nprint(calculate_average([2, 4, 6, 8, 10]))\n\n  choice: prints the median of a list of 5 elements\n  choice: computes the product of a list of 5 elements\n  choice: returns the length of the list\n  choice: computes the average of a list of 5 elements\n\nEnglish language description:", "targets": ["computes the average of a list of 5 elements"], "multiple_choice_targets": ["prints the median of a list of 5 elements", "computes the average of a list of 5 elements", "returns the length of the list", "computes the product of a list of 5 elements"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    reversed_string = \"\"\n    for i in string:\n        reversed_string = i + reversed_string\n    return reversed_string\n\nprint(reverse_string(\"Hello, world!\"))\n\n  choice: prints the input string in reverse order\n  choice: checks if a string contains only alphabets\n  choice: checks if a string is uppercase\n  choice: computes the length of the string\n\nEnglish language description:", "targets": ["prints the input string in reverse order"], "multiple_choice_targets": ["prints the input string in reverse order", "checks if a string contains only alphabets", "checks if a string is uppercase", "computes the length of the string"]}, {"inputs": "Python code:\ndef is_even(num):\n    return num % 2 == 0\n\nprint(is_even(7))\n\n  choice: checks if a number is even\n  choice: checks if a number is prime\n  choice: checks if a number is positive\n  choice: checks if a number is odd\n\nEnglish language description:", "targets": ["checks if a number is even"], "multiple_choice_targets": ["checks if a number is even", "checks if a number is prime", "checks if a number is positive", "checks if a number is odd"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n\n  choice: searches for an element in a sorted array\n  choice: searches for an element in an unsorted array\n  choice: inserts an element into an unsorted array\n  choice: deletes an element from an unsorted array\n\nEnglish language description:", "targets": ["searches for an element in a sorted array"], "multiple_choice_targets": ["searches for an element in a sorted array", "searches for an element in an unsorted array", "inserts an element into an unsorted array", "deletes an element from an unsorted array"]}, {"inputs": "Python code:\ndef calculate_area(radius):\n    return 3.14 * radius ** 2\n\nprint(calculate_area(5))\n\n  choice: finds the sum of two numbers\n  choice: finds the product of two numbers\n  choice: finds the area of a circle given its radius\n  choice: finds the volume of a sphere given its radius\n\nEnglish language description:", "targets": ["finds the area of a circle given its radius"], "multiple_choice_targets": ["finds the sum of two numbers", "finds the area of a circle given its radius", "finds the product of two numbers", "finds the volume of a sphere given its radius"]}, {"inputs": "Python code:\ndef calculate_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)\n\nprint(calculate_factorial(5))\n\n  choice: calculates the sum of first n natural numbers\n  choice: calculates the difference between two numbers\n  choice: calculates the product of first n natural numbers\n  choice: calculates the factorial of a number\n\nEnglish language description:", "targets": ["calculates the factorial of a number"], "multiple_choice_targets": ["calculates the sum of first n natural numbers", "calculates the factorial of a number", "calculates the difference between two numbers", "calculates the product of first n natural numbers"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint('Sorted array:', arr)\n\n  choice: sorts an array in descending order\n  choice: sorts an array in ascending order\n  choice: reverses the order of elements in an array\n  choice: removes duplicates from an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in descending order", "sorts an array in ascending order", "reverses the order of elements in an array", "removes duplicates from an array"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))\n\n  choice: checks if a number is even or odd\n  choice: checks if a number is prime\n  choice: checks if a number is positive or negative\n  choice: checks if a number is a multiple of 3\n\nEnglish language description:", "targets": ["checks if a number is prime"], "multiple_choice_targets": ["checks if a number is even or odd", "checks if a number is prime", "checks if a number is positive or negative", "checks if a number is a multiple of 3"]}, {"inputs": "Python code:\ndef selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\narr = [64, 25, 12, 22, 11]\nselection_sort(arr)\nprint('Sorted array:', arr)\n\n  choice: sorts an array in descending order\n  choice: sorts an array in ascending order\n  choice: reverses the order of elements in an array\n  choice: removes duplicates from an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in descending order", "sorts an array in ascending order", "reverses the order of elements in an array", "removes duplicates from an array"]}, {"inputs": "Python code:\ndef factorial(n):\n    return 1 if (n==1 or n==0) else n * factorial(n - 1)\n\nnum = 5\nprint('Factorial of',num,'is',factorial(num))\n\n  choice: returns the sum of all numbers less than a given number\n  choice: returns the product of all numbers less than a given number\n  choice: returns the factorial of a given number\n  choice: prints the square of a given number\n\nEnglish language description:", "targets": ["returns the factorial of a given number"], "multiple_choice_targets": ["returns the sum of all numbers less than a given number", "returns the product of all numbers less than a given number", "returns the factorial of a given number", "prints the square of a given number"]}, {"inputs": "Python code:\ndef gcd(a,b):\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\n\na = 60\nb = 48\nprint('GCD of',a,'and',b,'is',gcd(a,b))\n\n  choice: returns the greatest common divisor of two given numbers\n  choice: returns the least common multiple of two given numbers\n  choice: returns the difference between two given numbers\n  choice: returns the sum of two given numbers\n\nEnglish language description:", "targets": ["returns the greatest common divisor of two given numbers"], "multiple_choice_targets": ["returns the greatest common divisor of two given numbers", "returns the least common multiple of two given numbers", "returns the difference between two given numbers", "returns the sum of two given numbers"]}, {"inputs": "Python code:\ndef palindrome(s):\n    return s == s[::-1]\n\ns = 'racecar'\nis_palindrome = palindrome(s)\nprint('Is',s,'a palindrome?',is_palindrome)\n\n  choice: checks if a given string is a palindrome or not\n  choice: sorts a given string in ascending order\n  choice: capitalizes the first letter of each word in a given string\n  choice: replaces all occurrences of a given character in a given string with another character\n\nEnglish language description:", "targets": ["checks if a given string is a palindrome or not"], "multiple_choice_targets": ["checks if a given string is a palindrome or not", "sorts a given string in ascending order", "capitalizes the first letter of each word in a given string", "replaces all occurrences of a given character in a given string with another character"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print('Incorrect input')\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nnum_terms = 10\nfor i in range(num_terms):\n    print(fibonacci(i), end=', ')\n\n  choice: prints the sum of all even numbers less than a given number\n  choice: prints the nth term in the Fibonacci sequence\n  choice: returns the median value of a list of numbers\n  choice: prints the largest prime factor of a given number\n\nEnglish language description:", "targets": ["prints the nth term in the Fibonacci sequence"], "multiple_choice_targets": ["prints the sum of all even numbers less than a given number", "prints the nth term in the Fibonacci sequence", "returns the median value of a list of numbers", "prints the largest prime factor of a given number"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [10, 20, 30, 40, 50]\nx = 30\nresult = linear_search(arr, x)\nif result == -1:\n    print('Element is not present in array')\nelse:\n    print('Element is present at index', result)\n\n  choice: searches for a given element in a sorted array using binary search algorithm\n  choice: returns the maximum element in the given array\n  choice: searches for a given element in an unsorted array using linear search algorithm\n  choice: sorts the given array in descending order\n\nEnglish language description:", "targets": ["searches for a given element in an unsorted array using linear search algorithm"], "multiple_choice_targets": ["searches for a given element in a sorted array using binary search algorithm", "returns the maximum element in the given array", "searches for a given element in an unsorted array using linear search algorithm", "sorts the given array in descending order"]}, {"inputs": "Python code:\ndef power(base, exp):\n    if exp == 0:\n        return 1\n    elif exp % 2 == 0:\n        return power(base, exp/2) * power(base, exp/2)\n    else:\n        return base * power(base, exp-1)\n\nprint(power(2, 3))\nprint(power(5, 4))\n\n  choice: returns the square root of a given number\n  choice: returns the cube of a given number\n  choice: returns the result of raising a given base to a given exponent\n  choice: returns the factorial of a given number\n\nEnglish language description:", "targets": ["returns the result of raising a given base to a given exponent"], "multiple_choice_targets": ["returns the square root of a given number", "returns the cube of a given number", "returns the result of raising a given base to a given exponent", "returns the factorial of a given number"]}, {"inputs": "Python code:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnumber = 5\nprint(\"Factorial of\", number, \"is\", factorial(number))\n\n  choice: computes the sum of first n natural numbers\n  choice: calculates the factorial of a given number\n  choice: sorts the given array using bubble sort algorithm\n  choice: prints the reverse of the given string\n\nEnglish language description:", "targets": ["calculates the factorial of a given number"], "multiple_choice_targets": ["computes the sum of first n natural numbers", "calculates the factorial of a given number", "sorts the given array using bubble sort algorithm", "prints the reverse of the given string"]}, {"inputs": "Python code:\ndef binary_search(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n\n  choice: searches for a given element in an unsorted array using linear search algorithm\n  choice: sorts the given array using selection sort algorithm\n  choice: searches for a given element in a sorted array using binary search algorithm\n  choice: prints the length of the given array\n\nEnglish language description:", "targets": ["searches for a given element in a sorted array using binary search algorithm"], "multiple_choice_targets": ["searches for a given element in an unsorted array using linear search algorithm", "sorts the given array using selection sort algorithm", "searches for a given element in a sorted array using binary search algorithm", "prints the length of the given array"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\n\nbubble_sort(arr)\n\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]),\n\n  choice: sorts the given array using selection sort algorithm\n  choice: sorts the given array using bubble sort algorithm\n  choice: searches for a given element in a sorted array using binary search algorithm\n  choice: checks if a number is positive or negative\n\nEnglish language description:", "targets": ["sorts the given array using bubble sort algorithm"], "multiple_choice_targets": ["sorts the given array using selection sort algorithm", "sorts the given array using bubble sort algorithm", "searches for a given element in a sorted array using binary search algorithm", "checks if a number is positive or negative"]}, {"inputs": "Python code:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j] :\n                arr[j + 1] = arr[j]\n                j -= 1\n        arr[j + 1] = key\n\narr = [12, 11, 13, 5, 6]\ninsertion_sort(arr)\nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]),\n\n  choice: sorts the given array using bubble sort algorithm\n  choice: sorts the given array using insertion sort algorithm\n  choice: searches for a given element in an unsorted array using linear search algorithm\n  choice: prints the reverse of the given string\n\nEnglish language description:", "targets": ["sorts the given array using insertion sort algorithm"], "multiple_choice_targets": ["sorts the given array using bubble sort algorithm", "sorts the given array using insertion sort algorithm", "searches for a given element in an unsorted array using linear search algorithm", "prints the reverse of the given string"]}, {"inputs": "Python code:\ndef binary_search(arr, l, r, x):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\n\nresult = binary_search(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n\n  choice: searches for a given element in an unsorted array using linear search algorithm\n  choice: sorts the given array using selection sort algorithm\n  choice: searches for a given element in a sorted array using binary search algorithm\n  choice: prints the length of the given array\n\nEnglish language description:", "targets": ["searches for a given element in a sorted array using binary search algorithm"], "multiple_choice_targets": ["searches for a given element in an unsorted array using linear search algorithm", "sorts the given array using selection sort algorithm", "searches for a given element in a sorted array using binary search algorithm", "prints the length of the given array"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    reversed_string = \"\"\n    for i in string:\n        reversed_string = i + reversed_string\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string contains only digits\n  choice: checks if a string is lowercase\n  choice: computes the length of the string\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string contains only digits", "checks if a string is lowercase", "computes the length of the string"]}, {"inputs": "Python code:\ndef average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([1, 2, 3, 4, 5]))\n\n  choice: computes the median of a list of numbers\n  choice: computes the sum of a list of numbers\n  choice: computes the mode of a list of numbers\n  choice: computes the average of a list of numbers\n\nEnglish language description:", "targets": ["computes the average of a list of numbers"], "multiple_choice_targets": ["computes the median of a list of numbers", "computes the sum of a list of numbers", "computes the mode of a list of numbers", "computes the average of a list of numbers"]}, {"inputs": "Python code:\ndef find_largest(numbers):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_largest([1, 5, 3, 8, 2]))\n\n  choice: finds the smallest number in a list\n  choice: finds the largest number in a list\n  choice: sorts a list in ascending order\n  choice: counts the number of unique elements in a list\n\nEnglish language description:", "targets": ["finds the largest number in a list"], "multiple_choice_targets": ["finds the smallest number in a list", "finds the largest number in a list", "sorts a list in ascending order", "counts the number of unique elements in a list"]}, {"inputs": "Python code:\ndef find_vowels(string):\n    vowels = \"aeiou\"\n    count = 0\n    for letter in string:\n        if letter.lower() in vowels:\n            count += 1\n    return count\n\nprint(find_vowels(\"Hello, world!\"))\n\n  choice: counts the number of vowels in a string\n  choice: counts the number of consonants in a string\n  choice: checks if a string is a palindrome\n  choice: computes the length of a string\n\nEnglish language description:", "targets": ["counts the number of vowels in a string"], "multiple_choice_targets": ["counts the number of vowels in a string", "counts the number of consonants in a string", "checks if a string is a palindrome", "computes the length of a string"]}, {"inputs": "Python code:\ndef bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(numbers)\nprint(numbers)\n\n  choice: sorts a list in ascending order using the bubble sort algorithm\n  choice: searches for an element in a list\n  choice: finds the largest number in a list\n  choice: counts the number of unique elements in a list\n\nEnglish language description:", "targets": ["sorts a list in ascending order using the bubble sort algorithm"], "multiple_choice_targets": ["sorts a list in ascending order using the bubble sort algorithm", "searches for an element in a list", "finds the largest number in a list", "counts the number of unique elements in a list"]}, {"inputs": "Python code:\ndef binary_search(numbers, target):\n    left = 0\n    right = len(numbers) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if numbers[mid] == target:\n            return mid\n        elif numbers[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nnumbers = [1, 3, 5, 7, 9]\ntarget = 7\nprint(binary_search(numbers, target))\n\n  choice: searches for an element in a sorted list using the binary search algorithm\n  choice: sorts a list in ascending order using the bubble sort algorithm\n  choice: finds the largest number in a list\n  choice: counts the number of unique elements in a list\n\nEnglish language description:", "targets": ["searches for an element in a sorted list using the binary search algorithm"], "multiple_choice_targets": ["searches for an element in a sorted list using the binary search algorithm", "sorts a list in ascending order using the bubble sort algorithm", "finds the largest number in a list", "counts the number of unique elements in a list"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\n\n  choice: sorts an array in ascending order\n  choice: sorts an array in descending order\n  choice: finds the largest number in an array\n  choice: removes duplicates from an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in ascending order", "sorts an array in descending order", "finds the largest number in an array", "removes duplicates from an array"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))\n\n  choice: computes the factorial of a number\n  choice: computes the nth prime number\n  choice: computes the nth number in the Fibonacci sequence\n  choice: computes the sum of the first n numbers\n\nEnglish language description:", "targets": ["computes the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["computes the factorial of a number", "computes the nth prime number", "computes the nth number in the Fibonacci sequence", "computes the sum of the first n numbers"]}, {"inputs": "Python code:\ndef is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a number is prime\n  choice: checks if a string contains only letters\n  choice: checks if a string is a palindrome\n  choice: checks if a string is a valid email address\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a number is prime", "checks if a string contains only letters", "checks if a string is a palindrome", "checks if a string is a valid email address"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [10, 20, 30, 40, 50]\nx = 30\nresult = linear_search(arr, x)\nif result != -1:\n    print(\"Element is present at index\", result)\nelse:\n    print(\"Element is not present in array\")\n\n  choice: searches for a specific element in an unsorted array\n  choice: sorts an array in ascending order\n  choice: reverses an array\n  choice: finds the largest number in an array\n\nEnglish language description:", "targets": ["searches for a specific element in an unsorted array"], "multiple_choice_targets": ["searches for a specific element in an unsorted array", "sorts an array in ascending order", "reverses an array", "finds the largest number in an array"]}, {"inputs": "Python code:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >=0 and key < arr[j] :\n                arr[j+1] = arr[j]\n                j -= 1\n        arr[j+1] = key\n\narr = [12, 11, 13, 5, 6]\ninsertion_sort(arr)\n\n  choice: sorts an array in ascending order\n  choice: sorts an array in descending order\n  choice: finds the largest number in an array\n  choice: removes duplicates from an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in ascending order", "sorts an array in descending order", "finds the largest number in an array", "removes duplicates from an array"]}, {"inputs": "Python code:\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\narr = [ 2, 3, 4, 10, 40 ]\nx = 10\nresult = binary_search(arr, x)\nif result != -1:\n    print(\"Element is present at index\", result)\nelse:\n    print(\"Element is not present in array\")\n\n  choice: searches for a specific element in an unsorted array\n  choice: sorts an array in descending order\n  choice: finds the smallest number in an array\n  choice: removes duplicates from an array\n\nEnglish language description:", "targets": ["searches for a specific element in a sorted array"], "multiple_choice_targets": ["searches for a specific element in an unsorted array", "sorts an array in descending order", "finds the smallest number in an array", "removes duplicates from an array"]}, {"inputs": "Python code:\ndef factorial(num):\n    if num == 1:\n        return num\n    else:\n        return num * factorial(num-1)\n\nprint(factorial(5))\n\n  choice: calculates the sum of the first 5 numbers\n  choice: calculates the product of the first 5 numbers\n  choice: calculates the difference between the first 5 numbers\n  choice: calculates the quotient of the first 5 numbers\n\nEnglish language description:", "targets": ["calculates the product of the first 5 numbers"], "multiple_choice_targets": ["calculates the sum of the first 5 numbers", "calculates the product of the first 5 numbers", "calculates the difference between the first 5 numbers", "calculates the quotient of the first 5 numbers"]}, {"inputs": "Python code:\ndef count_vowels(word):\n    vowels = \"aeiou\"\n    count = 0\n    for letter in word:\n        if letter in vowels:\n            count += 1\n    return count\n\nprint(count_vowels(\"hello\"))\n\n  choice: counts the number of consonants in a word\n  choice: counts the number of vowels in a word\n  choice: counts the number of syllables in a word\n  choice: counts the number of letters in a word\n\nEnglish language description:", "targets": ["counts the number of vowels in a word"], "multiple_choice_targets": ["counts the number of consonants in a word", "counts the number of vowels in a word", "counts the number of syllables in a word", "counts the number of letters in a word"]}, {"inputs": "Python code:\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(11))\n\n  choice: determines if a number is positive\n  choice: determines if a number is odd\n  choice: determines if a number is even\n  choice: determines if a number is prime\n\nEnglish language description:", "targets": ["determines if a number is prime"], "multiple_choice_targets": ["determines if a number is prime", "determines if a number is positive", "determines if a number is odd", "determines if a number is even"]}, {"inputs": "Python code:\ndef reverse_list(lst):\n    return lst[::-1]\n\nprint(reverse_list([1,2,3,4]))\n\n  choice: reverses the order of elements in a list\n  choice: sorts the elements in a list in ascending order\n  choice: removes all duplicates from a list\n  choice: returns the sum of all elements in a list\n\nEnglish language description:", "targets": ["reverses the order of elements in a list"], "multiple_choice_targets": ["reverses the order of elements in a list", "sorts the elements in a list in ascending order", "removes all duplicates from a list", "returns the sum of all elements in a list"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\n\nprint(remove_duplicates([1,2,3,2,4,5,3]))\n\n  choice: reverses the order of elements in a list\n  choice: sorts the elements in a list in ascending order\n  choice: removes all duplicates from a list\n  choice: returns the sum of all elements in a list\n\nEnglish language description:", "targets": ["removes all duplicates from a list"], "multiple_choice_targets": ["reverses the order of elements in a list", "sorts the elements in a list in ascending order", "removes all duplicates from a list", "returns the sum of all elements in a list"]}, {"inputs": "Python code:\ndef add_lists(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n\nprint(add_lists([1,2,3], [4,5,6]))\n\n  choice: multiplies each element in lst1 by each element in lst2 and returns the product\n  choice: adds each element in lst1 to each element in lst2 and returns the sum\n  choice: subtracts each element in lst2 from each element in lst1 and returns the difference\n  choice: divides each element in lst1 by each element in lst2 and returns the quotient\n\nEnglish language description:", "targets": ["adds each element in lst1 to each element in lst2 and returns the sum"], "multiple_choice_targets": ["multiplies each element in lst1 by each element in lst2 and returns the product", "adds each element in lst1 to each element in lst2 and returns the sum", "subtracts each element in lst2 from each element in lst1 and returns the difference", "divides each element in lst1 by each element in lst2 and returns the quotient"]}, {"inputs": "Python code:\ndef find_max(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max([3, 7, 2, 9, 4]))\n\n  choice: finds the average of a list of numbers\n  choice: finds the median of a list of numbers\n  choice: finds the minimum value in a list of numbers\n  choice: finds the maximum value in a list of numbers\n\nEnglish language description:", "targets": ["finds the maximum value in a list of numbers"], "multiple_choice_targets": ["finds the average of a list of numbers", "finds the median of a list of numbers", "finds the minimum value in a list of numbers", "finds the maximum value in a list of numbers"]}, {"inputs": "Python code:\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nprint(factorial(5))\n\n  choice: calculates the value of pi\n  choice: calculates the factorial of a number\n  choice: calculates the square root of a number\n  choice: calculates the exponential value of a number\n\nEnglish language description:", "targets": ["calculates the factorial of a number"], "multiple_choice_targets": ["calculates the value of pi", "calculates the factorial of a number", "calculates the square root of a number", "calculates the exponential value of a number"]}, {"inputs": "Python code:\ndef linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\nprint(linear_search([3, 7, 9, 2], 9))\n\n  choice: performs a binary search on an array\n  choice: performs a linear search on an array\n  choice: sorts an array in ascending order\n  choice: reverses the order of an array\n\nEnglish language description:", "targets": ["performs a linear search on an array"], "multiple_choice_targets": ["performs a binary search on an array", "performs a linear search on an array", "sorts an array in ascending order", "reverses the order of an array"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint(arr)\n\n  choice: performs a binary search on an array\n  choice: performs a linear search on an array\n  choice: sorts an array in ascending order\n  choice: reverses the order of an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["performs a binary search on an array", "performs a linear search on an array", "sorts an array in ascending order", "reverses the order of an array"]}, {"inputs": "Python code:\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n\nrectangle = Rectangle(5, 10)\nprint(rectangle.area())\n\n  choice: defines a class Rectangle with two attributes\n  choice: defines a function area that calculates the area of a rectangle\n  choice: creates an object rectangle of class Rectangle with length 5 and width 10\n  choice: prints the area of a rectangle\n\nEnglish language description:", "targets": ["creates an object rectangle of class Rectangle with length 5 and width 10"], "multiple_choice_targets": ["defines a class Rectangle with two attributes", "defines a function area that calculates the area of a rectangle", "creates an object rectangle of class Rectangle with length 5 and width 10", "prints the area of a rectangle"]}, {"inputs": "Python code:\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\narr = [12, 11, 13, 5, 6, 7]\nmerge_sort(arr)\nprint(arr)\n\n  choice: performs a binary search on an array\n  choice: performs a linear search on an array\n  choice: sorts an array in ascending order using merge sort\n  choice: reverses the order of an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order using merge sort"], "multiple_choice_targets": ["performs a binary search on an array", "performs a linear search on an array", "sorts an array in ascending order using merge sort", "reverses the order of an array"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    if len(string) == 0:\n        return string\n    else:\n        return reverse_string(string[1:]) + string[0]\n\nprint(reverse_string(\"hello\"))\n\n  choice: prints the input string backwards\n  choice: capitalizes the first letter of each word in the input string\n  choice: removes all vowels from the input string\n  choice: counts the number of characters in the input string\n\nEnglish language description:", "targets": ["prints the input string backwards"], "multiple_choice_targets": ["prints the input string backwards", "capitalizes the first letter of each word in the input string", "removes all vowels from the input string", "counts the number of characters in the input string"]}, {"inputs": "Python code:\ndef multiply_by_two(num):\n    return num * 2\n\nresult = multiply_by_two(5)\n\n  choice: multiplies a number by 2\n  choice: divides a number by 2\n  choice: adds 2 to a number\n  choice: subtracts 2 from a number\n\nEnglish language description:", "targets": ["multiplies a number by 2"], "multiple_choice_targets": ["multiplies a number by 2", "divides a number by 2", "adds 2 to a number", "subtracts 2 from a number"]}, {"inputs": "Python code:\ndef is_palindrome(word):\n    return word == word[::-1]\n\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if a word is spelled correctly\n  choice: reverses the letters in a word\n  choice: checks if a word is a palindrome\n  choice: replaces all vowels in a word with the letter \"a\"\n\nEnglish language description:", "targets": ["checks if a word is a palindrome"], "multiple_choice_targets": ["checks if a word is a palindrome", "checks if a word is spelled correctly", "reverses the letters in a word", "replaces all vowels in a word with the letter \"a\""]}, {"inputs": "Python code:\ndef find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max([3, 5, 1, 8, 2]))\n\n  choice: finds the maximum value in a list\n  choice: finds the minimum value in a list\n  choice: sorts a list in ascending order\n  choice: calculates the average of the values in a list\n\nEnglish language description:", "targets": ["finds the maximum value in a list"], "multiple_choice_targets": ["finds the maximum value in a list", "finds the minimum value in a list", "sorts a list in ascending order", "calculates the average of the values in a list"]}, {"inputs": "Python code:\ndef count_vowels(word):\n    vowels = 'aeiou'\n    count = 0\n    for letter in word:\n        if letter in vowels:\n            count += 1\n    return count\n\nprint(count_vowels('hello'))\n\n  choice: counts the number of consonants in a word\n  choice: counts the number of vowels in a word\n  choice: checks if a word is a palindrome\n  choice: replaces all vowels in a word with the letter 'a'\n\nEnglish language description:", "targets": ["counts the number of vowels in a word"], "multiple_choice_targets": ["counts the number of vowels in a word", "counts the number of consonants in a word", "checks if a word is a palindrome", "replaces all vowels in a word with the letter 'a'"]}, {"inputs": "Python code:\ndef square(num):\n    return num ** 2\n\nsquares = [square(x) for x in range(1, 6)]\nprint(squares)\n\n  choice: multiplies each number in a list by itself\n  choice: adds each number in a list to itself\n  choice: subtracts each number in a list from itself\n  choice: divides each number in a list by 2\n\nEnglish language description:", "targets": ["multiplies each number in a list by itself"], "multiple_choice_targets": ["multiplies each number in a list by itself", "adds each number in a list to itself", "subtracts each number in a list from itself", "divides each number in a list by 2"]}, {"inputs": "Python code:\ndef find_largest(numbers):\n    largest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n    return largest\n\nnums = [4, 8, 2, 9, 5]\nlargest_num = find_largest(nums)\nprint(largest_num)\n\n  choice: returns the sum of all numbers in a list\n  choice: returns the average of all numbers in a list\n  choice: returns the smallest number in a list\n  choice: returns the largest number in a list\n\nEnglish language description:", "targets": ["returns the largest number in a list"], "multiple_choice_targets": ["returns the sum of all numbers in a list", "returns the average of all numbers in a list", "returns the smallest number in a list", "returns the largest number in a list"]}, {"inputs": "Python code:\ndef reverse_string(string):\n    return string[::-1]\n\nword = 'hello'\nreversed_word = reverse_string(word)\nprint(reversed_word)\n\n  choice: removes all vowels from a string\n  choice: reverses the order of the characters in a string\n  choice: replaces all spaces with underscores in a string\n  choice: capitalizes the first letter of each word in a string\n\nEnglish language description:", "targets": ["reverses the order of the characters in a string"], "multiple_choice_targets": ["removes all vowels from a string", "reverses the order of the characters in a string", "replaces all spaces with underscores in a string", "capitalizes the first letter of each word in a string"]}, {"inputs": "Python code:\ndef is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\nword = \"racecar\"\npalindrome = is_palindrome(word)\nprint(palindrome)\n\n  choice: checks if a string is an anagram of another string\n  choice: checks if a string is a palindrome\n  choice: checks if a number is prime\n  choice: checks if a number is even\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is an anagram of another string", "checks if a string is a palindrome", "checks if a number is prime", "checks if a number is even"]}, {"inputs": "Python code:\ndef binary_search(nums, target):\n    left = 0\n    right = len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nnums = [2, 5, 8, 12, 16, 23, 38, 56, 72, 91]\ntarget_num = 23\nresult = binary_search(nums, target_num)\nprint(result)\n\n  choice: sorts a list of numbers in ascending order\n  choice: finds the largest number in a list\n  choice: finds the smallest number in a list\n  choice: searches for a target number in a sorted list using binary search\n\nEnglish language description:", "targets": ["searches for a target number in a sorted list using binary search"], "multiple_choice_targets": ["sorts a list of numbers in ascending order", "finds the largest number in a list", "finds the smallest number in a list", "searches for a target number in a sorted list using binary search"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nnum = 10\nfib_num = fibonacci(num)\nprint(fib_num)\n\n  choice: prints the sum of the first n prime numbers\n  choice: calculates the factorial of n\n  choice: prints the nth number in the Fibonacci sequence\n  choice: prints the sum of the first n natural numbers\n\nEnglish language description:", "targets": ["prints the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["prints the sum of the first n prime numbers", "calculates the factorial of n", "prints the nth number in the Fibonacci sequence", "prints the sum of the first n natural numbers"]}, {"inputs": "Python code:\ndef remove_duplicates(nums):\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\n\nnumbers = [2, 5, 2, 6, 8, 9, 1, 5, 7, 8]\nunique_nums = remove_duplicates(numbers)\nprint(unique_nums)\n\n  choice: adds up all the elements in a list\n  choice: removes all even numbers from a list\n  choice: finds the average of all the elements in a list\n  choice: removes duplicate elements from a list\n\nEnglish language description:", "targets": ["removes duplicate elements from a list"], "multiple_choice_targets": ["adds up all the elements in a list", "removes all even numbers from a list", "finds the average of all the elements in a list", "removes duplicate elements from a list"]}, {"inputs": "Python code:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))\n\n  choice: calculates the factorial of 5\n  choice: calculates the square root of 5\n  choice: calculates the cube root of 5\n  choice: calculates the exponential of 5\n\nEnglish language description:", "targets": ["calculates the factorial of 5"], "multiple_choice_targets": ["calculates the factorial of 5", "calculates the square root of 5", "calculates the cube root of 5", "calculates the exponential of 5"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n\n  choice: calculates the sum of the first 10 integers\n  choice: calculates the product of the first 10 integers\n  choice: calculates the nth term of the Fibonacci sequence\n  choice: calculates the sum of the first 10 terms in the Fibonacci sequence\n\nEnglish language description:", "targets": ["calculates the nth term of the Fibonacci sequence"], "multiple_choice_targets": ["calculates the sum of the first 10 integers", "calculates the product of the first 10 integers", "calculates the nth term of the Fibonacci sequence", "calculates the sum of the first 10 terms in the Fibonacci sequence"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n\n  choice: searches for a given element in an array using linear search\n  choice: searches for a given element in an array using binary search\n  choice: sorts an array in ascending order\n  choice: reverses the order of elements in an array\n\nEnglish language description:", "targets": ["searches for a given element in an array using binary search"], "multiple_choice_targets": ["searches for a given element in an array using linear search", "searches for a given element in an array using binary search", "sorts an array in ascending order", "reverses the order of elements in an array"]}, {"inputs": "Python code:\ndef find_lcm(num1, num2):\n    if(num1>num2):\n        num=num1\n        den=num2\n    else:\n        num=num2\n        den=num1\n    rem=num%den\n    while(rem!=0):\n        num=den\n        den=rem\n        rem=num%den\n    gcd=den\n    lcm=int(int(num1*num2)/int(gcd))\n    return lcm\n\nprint(find_lcm(5, 7))\n\n  choice: calculates the greatest common divisor of two numbers\n  choice: calculates the lowest common multiple of two numbers\n  choice: calculates the sum of two numbers\n  choice: calculates the product of two numbers\n\nEnglish language description:", "targets": ["calculates the lowest common multiple of two numbers"], "multiple_choice_targets": ["calculates the greatest common divisor of two numbers", "calculates the lowest common multiple of two numbers", "calculates the sum of two numbers", "calculates the product of two numbers"]}, {"inputs": "Python code:\ndef is_armstrong(n):\n    order = len(str(n))\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return n == sum\n\nprint(is_armstrong(153))\n\n  choice: checks if a number is prime\n  choice: checks if a number is even\n  choice: checks if a number is odd\n  choice: checks if a number is an Armstrong number\n\nEnglish language description:", "targets": ["checks if a number is an Armstrong number"], "multiple_choice_targets": ["checks if a number is prime", "checks if a number is even", "checks if a number is odd", "checks if a number is an Armstrong number"]}, {"inputs": "Python code:\ndef binary_to_decimal(binary): \n    decimal, i = 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal\n\nprint(binary_to_decimal(1010))\n\n  choice: converts a decimal number to binary\n  choice: converts a binary number to decimal\n  choice: converts a hexadecimal number to decimal\n  choice: converts an octal number to decimal\n\nEnglish language description:", "targets": ["converts a binary number to decimal"], "multiple_choice_targets": ["converts a decimal number to binary", "converts a binary number to decimal", "converts a hexadecimal number to decimal", "converts an octal number to decimal"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid-1, x)\n        else:\n            return binary_search(arr, mid+1, high, x)\n    else:\n        return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binary_search(arr, 0, len(arr)-1, x)\nif result != -1:\n    print(\"Element is present at index\", str(result))\nelse:\n    print(\"Element is not present in array\")\n\n  choice: performs a linear search on an array\n  choice: sorts an array in ascending order\n  choice: finds the largest number in an array\n  choice: performs a binary search on an array\n\nEnglish language description:", "targets": ["performs a binary search on an array"], "multiple_choice_targets": ["performs a linear search on an array", "sorts an array in ascending order", "finds the largest number in an array", "performs a binary search on an array"]}, {"inputs": "Python code:\ndef fizzbuzz(n):\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\nfizzbuzz(30)\n\n  choice: finds the largest number in a list\n  choice: prints \"Fizz\" for multiples of 3 and \"Buzz\" for multiples of 5\n  choice: calculates the factorial of n\n  choice: sorts a list in ascending order\n\nEnglish language description:", "targets": ["prints \"Fizz\" for multiples of 3 and \"Buzz\" for multiples of 5"], "multiple_choice_targets": ["finds the largest number in a list", "prints \"Fizz\" for multiples of 3 and \"Buzz\" for multiples of 5", "calculates the factorial of n", "sorts a list in ascending order"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True\n\nnum = 17\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")\n\n  choice: checks if a number is even\n  choice: checks if a number is odd\n  choice: checks if a number is prime\n  choice: checks if a number is a multiple of 3\n\nEnglish language description:", "targets": ["checks if a number is prime"], "multiple_choice_targets": ["checks if a number is even", "checks if a number is odd", "checks if a number is prime", "checks if a number is a multiple of 3"]}, {"inputs": "Python code:\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\ns = \"The quick brown fox jumps over the lazy dog\"\ncount = count_words(s)\nprint(\"Number of words:\", count)\n\n  choice: counts the number of vowels in a word\n  choice: capitalizes the first letter of a word\n  choice: reverses the order of the letters in a word\n  choice: counts the number of words in a sentence\n\nEnglish language description:", "targets": ["counts the number of words in a sentence"], "multiple_choice_targets": ["counts the number of vowels in a word", "capitalizes the first letter of a word", "reverses the order of the letters in a word", "counts the number of words in a sentence"]}, {"inputs": "Python code:\ndef max_num(nums):\n    max = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n    return max\n\nlst = [10, 20, 4, 45, 99]\nmax = max_num(lst)\nprint(\"Maximum number is\", max)\n\n  choice: finds the smallest number in a list\n  choice: finds the largest number in a list\n  choice: calculates the factorial of n\n  choice: performs a linear search on a list\n\nEnglish language description:", "targets": ["finds the largest number in a list"], "multiple_choice_targets": ["finds the smallest number in a list", "finds the largest number in a list", "calculates the factorial of n", "performs a linear search on a list"]}, {"inputs": "Python code:\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    else:\n        s1 = sorted(s1)\n        s2 = sorted(s2)\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                return False\n        return True\n\nstr1 = \"listen\"\nstr2 = \"silent\"\nif is_anagram(str1, str2):\n    print(str1, \"and\", str2, \"are anagrams\")\nelse:\n    print(str1, \"and\", str2, \"are not anagrams\")\n\n  choice: checks if two strings are palindromes\n  choice: checks if two strings are anagrams\n  choice: removes duplicates from a string\n  choice: replaces all occurrences of a substring in a string\n\nEnglish language description:", "targets": ["checks if two strings are anagrams"], "multiple_choice_targets": ["checks if two strings are palindromes", "checks if two strings are anagrams", "removes duplicates from a string", "replaces all occurrences of a substring in a string"]}]