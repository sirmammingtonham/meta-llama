[{"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\n  choice: returns the nth number in the Fibonacci sequence\n  choice: returns the sum of the first n numbers in the Fibonacci sequence\n  choice: returns the product of the first n numbers in the Fibonacci sequence\n  choice: returns the average of the first n numbers in the Fibonacci sequence\n\nEnglish language description:", "targets": ["returns the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["returns the nth number in the Fibonacci sequence", "returns the sum of the first n numbers in the Fibonacci sequence", "returns the product of the first n numbers in the Fibonacci sequence", "returns the average of the first n numbers in the Fibonacci sequence"]}, {"inputs": "Python code:\ndef is_palindrome(s):\n    s = s.lower()\n    s = ''.join(e for e in s if e.isalnum())\n    return s == s[::-1]\n\n  choice: checks if a string is a palindrome\n  choice: checks if a string contains only alphabets\n  choice: checks if a string contains only digits\n  choice: checks if a string is a pangram\n\nEnglish language description:", "targets": ["checks if a string is a palindrome"], "multiple_choice_targets": ["checks if a string is a palindrome", "checks if a string contains only alphabets", "checks if a string contains only digits", "checks if a string is a pangram"]}, {"inputs": "Python code:\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\n  choice: sorts an array in ascending order\n  choice: searches for a given element in a sorted array using binary search\n  choice: reverses an array\n  choice: finds the maximum element in an array\n\nEnglish language description:", "targets": ["searches for a given element in a sorted array using binary search"], "multiple_choice_targets": ["sorts an array in ascending order", "searches for a given element in a sorted array using binary search", "reverses an array", "finds the maximum element in an array"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n  choice: sorts an array in descending order\n  choice: sorts an array in ascending order using selection sort\n  choice: sorts an array in ascending order using bubble sort\n  choice: sorts an array in ascending order using insertion sort\n\nEnglish language description:", "targets": ["sorts an array in ascending order using bubble sort"], "multiple_choice_targets": ["sorts an array in descending order", "sorts an array in ascending order using selection sort", "sorts an array in ascending order using bubble sort", "sorts an array in ascending order using insertion sort"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n  choice: searches for a given element in an unsorted array using binary search\n  choice: sorts an array in ascending order\n  choice: searches for a given element in an unsorted array using linear search\n  choice: reverses an array\n\nEnglish language description:", "targets": ["searches for a given element in an unsorted array using linear search"], "multiple_choice_targets": ["searches for a given element in an unsorted array using binary search", "sorts an array in ascending order", "searches for a given element in an unsorted array using linear search", "reverses an array"]}, {"inputs": "Python code:\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n  choice: sorts an array in descending order using merge sort\n  choice: sorts an array in ascending order using bubble sort\n  choice: sorts an array in ascending order using insertion sort\n  choice: sorts an array in ascending order using merge sort\n\nEnglish language description:", "targets": ["sorts an array in ascending order using merge sort"], "multiple_choice_targets": ["sorts an array in descending order using merge sort", "sorts an array in ascending order using bubble sort", "sorts an array in ascending order using insertion sort", "sorts an array in ascending order using merge sort"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n\nprint(fibonacci(10))\n\n  choice: prints the sum of first 10 fibonacci numbers\n  choice: prints the 10th fibonacci number\n  choice: prints all fibonacci numbers less than 10\n  choice: prints the product of first 10 fibonacci numbers\n\nEnglish language description:", "targets": ["prints the 10th fibonacci number"], "multiple_choice_targets": ["prints the sum of first 10 fibonacci numbers", "prints the 10th fibonacci number", "prints all fibonacci numbers less than 10", "prints the product of first 10 fibonacci numbers"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(17))\n\n  choice: returns True if a number is even\n  choice: returns True if a number is prime\n  choice: returns True if a number is odd\n  choice: returns True if a number is negative\n\nEnglish language description:", "targets": ["returns True if a number is prime"], "multiple_choice_targets": ["returns True if a number is even", "returns True if a number is prime", "returns True if a number is odd", "returns True if a number is negative"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string('hello'))\n\n  choice: prints the length of the string\n  choice: prints the string in reverse order\n  choice: prints the first character of the string\n  choice: prints the last character of the string\n\nEnglish language description:", "targets": ["prints the string in reverse order"], "multiple_choice_targets": ["prints the length of the string", "prints the string in reverse order", "prints the first character of the string", "prints the last character of the string"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\n\nprint(remove_duplicates([1,2,3,3,4,5,5]))\n\n  choice: removes all even numbers from the list\n  choice: removes all odd numbers from the list\n  choice: removes all duplicates from the list\n  choice: removes all prime numbers from the list\n\nEnglish language description:", "targets": ["removes all duplicates from the list"], "multiple_choice_targets": ["removes all even numbers from the list", "removes all odd numbers from the list", "removes all duplicates from the list", "removes all prime numbers from the list"]}, {"inputs": "Python code:\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(count_vowels('hello'))\n\n  choice: counts the number of consonants in the string\n  choice: counts the number of vowels in the string\n  choice: counts the number of words in the string\n  choice: counts the number of characters in the string\n\nEnglish language description:", "targets": ["counts the number of vowels in the string"], "multiple_choice_targets": ["counts the number of consonants in the string", "counts the number of vowels in the string", "counts the number of words in the string", "counts the number of characters in the string"]}, {"inputs": "Python code:\ndef find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max([1,2,3,4,5]))\n\n  choice: finds the minimum value in the list\n  choice: finds the maximum value in the list\n  choice: finds the average value of the list\n  choice: finds the median value of the list\n\nEnglish language description:", "targets": ["finds the maximum value in the list"], "multiple_choice_targets": ["finds the minimum value in the list", "finds the maximum value in the list", "finds the average value of the list", "finds the median value of the list"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\nprint(fibonacci(10))\n\n  choice: prints the first 10 numbers in the Fibonacci sequence\n  choice: prints the sum of the first 10 numbers in the Fibonacci sequence\n  choice: prints the product of the first 10 numbers in the Fibonacci sequence\n  choice: prints the last number in the Fibonacci sequence\n\nEnglish language description:", "targets": ["prints the 10th number in the Fibonacci sequence"], "multiple_choice_targets": ["prints the first 10 numbers in the Fibonacci sequence", "prints the sum of the first 10 numbers in the Fibonacci sequence", "prints the product of the first 10 numbers in the Fibonacci sequence", "prints the 10th number in the Fibonacci sequence"]}, {"inputs": "Python code:\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2,num):\n        if num%i ==0:\n            return False\n    return True\nprint(is_prime(7))\n\n  choice: checks if a number is even or odd\n  choice: checks if a number is prime or not\n  choice: checks if a number is positive or negative\n  choice: checks if a number is a multiple of 3\n\nEnglish language description:", "targets": ["checks if a number is prime or not"], "multiple_choice_targets": ["checks if a number is even or odd", "checks if a number is prime or not", "checks if a number is positive or negative", "checks if a number is a multiple of 3"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    return s[::-1]\nprint(reverse_string('hello'))\n\n  choice: prints the length of a string\n  choice: prints the first character of a string\n  choice: prints the last character of a string\n  choice: prints the reverse of a string\n\nEnglish language description:", "targets": ["prints the reverse of a string"], "multiple_choice_targets": ["prints the length of a string", "prints the first character of a string", "prints the last character of a string", "prints the reverse of a string"]}, {"inputs": "Python code:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(5))\n\n  choice: prints the sum of all numbers from 1 to 5\n  choice: prints the product of all numbers from 1 to 5\n  choice: prints the difference between 5 and 1\n  choice: prints the quotient of 5 divided by 1\n\nEnglish language description:", "targets": ["prints the product of all numbers from 1 to 5"], "multiple_choice_targets": ["prints the sum of all numbers from 1 to 5", "prints the product of all numbers from 1 to 5", "prints the difference between 5 and 1", "prints the quotient of 5 divided by 1"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\nprint(remove_duplicates([1,2,3,4,4,5,6,6]))\n\n  choice: removes all even numbers from a list\n  choice: removes all odd numbers from a list\n  choice: removes all duplicates from a list\n  choice: removes all prime numbers from a list\n\nEnglish language description:", "targets": ["removes all duplicates from a list"], "multiple_choice_targets": ["removes all even numbers from a list", "removes all odd numbers from a list", "removes all duplicates from a list", "removes all prime numbers from a list"]}, {"inputs": "Python code:\ndef bubble_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1] :\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))\n\n  choice: sorts a list in descending order\n  choice: sorts a list in ascending order\n  choice: reverses a list\n  choice: shuffles a list randomly\n\nEnglish language description:", "targets": ["sorts a list in ascending order"], "multiple_choice_targets": ["sorts a list in descending order", "sorts a list in ascending order", "reverses a list", "shuffles a list randomly"]}, {"inputs": "Python code:\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\n  choice: counts the number of vowels in a string\n  choice: counts the number of consonants in a string\n  choice: checks if a string is a palindrome\n  choice: checks if a string contains only digits\n\nEnglish language description:", "targets": ["counts the number of vowels in a string"], "multiple_choice_targets": ["counts the number of vowels in a string", "counts the number of consonants in a string", "checks if a string is a palindrome", "checks if a string contains only digits"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    return s[::-1]\n\n  choice: reverses a string\n  choice: sorts a string in alphabetical order\n  choice: removes all spaces from a string\n  choice: converts a string to uppercase\n\nEnglish language description:", "targets": ["reverses a string"], "multiple_choice_targets": ["reverses a string", "sorts a string in alphabetical order", "removes all spaces from a string", "converts a string to uppercase"]}, {"inputs": "Python code:\ndef find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n  choice: finds the maximum number in a list\n  choice: finds the minimum number in a list\n  choice: sorts a list in ascending order\n  choice: returns the length of a list\n\nEnglish language description:", "targets": ["finds the maximum number in a list"], "multiple_choice_targets": ["finds the maximum number in a list", "finds the minimum number in a list", "sorts a list in ascending order", "returns the length of a list"]}, {"inputs": "Python code:\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n  choice: checks if a number is prime\n  choice: checks if a number is even\n  choice: checks if a number is odd\n  choice: checks if a number is negative\n\nEnglish language description:", "targets": ["checks if a number is prime"], "multiple_choice_targets": ["checks if a number is prime", "checks if a number is even", "checks if a number is odd", "checks if a number is negative"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n  choice: returns the nth Fibonacci number\n  choice: returns the sum of all numbers in a list\n  choice: returns the product of all numbers in a list\n  choice: returns the length of a string\n\nEnglish language description:", "targets": ["returns the nth Fibonacci number"], "multiple_choice_targets": ["returns the nth Fibonacci number", "returns the sum of all numbers in a list", "returns the product of all numbers in a list", "returns the length of a string"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n    return new_lst\n\n  choice: removes duplicates from a list\n  choice: reverses a list\n  choice: sorts a list in descending order\n  choice: returns the length of a list\n\nEnglish language description:", "targets": ["removes duplicates from a list"], "multiple_choice_targets": ["removes duplicates from a list", "reverses a list", "sorts a list in descending order", "returns the length of a list"]}, {"inputs": "Python code:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n  choice: sorts an array in ascending order\n  choice: searches for a given element in an unsorted array using binary search\n  choice: searches for a given element in an unsorted array using linear search\n  choice: reverses an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in ascending order", "searches for a given element in an unsorted array using binary search", "searches for a given element in an unsorted array using linear search", "reverses an array"]}, {"inputs": "Python code:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >=0 and key < arr[j] :\n                arr[j+1] = arr[j]\n                j -= 1\n        arr[j+1] = key\n\n  choice: sorts an array in ascending order\n  choice: searches for a given element in an unsorted array using binary search\n  choice: searches for a given element in an unsorted array using linear search\n  choice: reverses an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in ascending order", "searches for a given element in an unsorted array using binary search", "searches for a given element in an unsorted array using linear search", "reverses an array"]}, {"inputs": "Python code:\ndef selection_sort(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n  choice: sorts an array in ascending order\n  choice: searches for a given element in an unsorted array using binary search\n  choice: searches for a given element in an unsorted array using linear search\n  choice: reverses an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in ascending order", "searches for a given element in an unsorted array using binary search", "searches for a given element in an unsorted array using linear search", "reverses an array"]}, {"inputs": "Python code:\ndef merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr)//2 #Finding the mid of the array\n        L = arr[:mid] # Dividing the array elements \n        R = arr[mid:] # into 2 halves\n        merge_sort(L) # Sorting the first half\n        merge_sort(R) # Sorting the second half\n \n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n  choice: sorts an array in ascending order\n  choice: searches for a given element in an unsorted array using binary search\n  choice: searches for a given element in an unsorted array using linear search\n  choice: reverses an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in ascending order", "searches for a given element in an unsorted array using binary search", "searches for a given element in an unsorted array using linear search", "reverses an array"]}, {"inputs": "Python code:\ndef quick_sort(arr,low,high):\n    if low < high:\n        pi = partition(arr,low,high)\n        quick_sort(arr, low, pi-1)\n        quick_sort(arr, pi+1, high)\n\ndef partition(arr,low,high):\n    i = ( low-1 )         # index of smaller element\n    pivot = arr[high]     # pivot\n \n    for j in range(low , high):\n        if   arr[j] <= pivot:\n            i = i+1\n            arr[i],arr[j] = arr[j],arr[i]\n \n    arr[i+1],arr[high] = arr[high],arr[i+1]\n    return ( i+1 )\n\n  choice: sorts an array in ascending order\n  choice: searches for a given element in an unsorted array using binary search\n  choice: searches for a given element in an unsorted array using linear search\n  choice: reverses an array\n\nEnglish language description:", "targets": ["sorts an array in ascending order"], "multiple_choice_targets": ["sorts an array in ascending order", "searches for a given element in an unsorted array using binary search", "searches for a given element in an unsorted array using linear search", "reverses an array"]}, {"inputs": "Python code:\ndef reverse_array(arr):\n    start = 0\n    end = len(arr)-1\n    while(start < end):\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\n  choice: sorts an array in ascending order\n  choice: searches for a given element in an unsorted array using binary search\n  choice: searches for a given element in an unsorted array using linear search\n  choice: reverses an array\n\nEnglish language description:", "targets": ["reverses an array"], "multiple_choice_targets": ["sorts an array in ascending order", "searches for a given element in an unsorted array using binary search", "searches for a given element in an unsorted array using linear search", "reverses an array"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print('Incorrect input')\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n  choice: prints the nth number in the Fibonacci sequence\n  choice: prints the first 10 numbers in the Fibonacci sequence\n  choice: checks if a number is even or odd\n  choice: prints 'Incorrect input' if n is negative\n\nEnglish language description:", "targets": ["prints the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["prints 'Incorrect input' if n is negative", "prints the nth number in the Fibonacci sequence", "prints the first 10 numbers in the Fibonacci sequence", "checks if a number is even or odd"]}, {"inputs": "Python code:\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\n  choice: searches for an element in an array using linear search\n  choice: searches for an element in an array using binary search\n  choice: sorts an array in ascending order using bubble sort\n  choice: sorts an array in descending order using merge sort\n\nEnglish language description:", "targets": ["searches for an element in an array using binary search"], "multiple_choice_targets": ["searches for an element in an array using linear search", "searches for an element in an array using binary search", "sorts an array in ascending order using bubble sort", "sorts an array in descending order using merge sort"]}, {"inputs": "Python code:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >=0 and key < arr[j] :\n                arr[j+1] = arr[j]\n                j -= 1\n        arr[j+1] = key\n\n  choice: sorts an array in descending order using selection sort\n  choice: sorts an array in ascending order using bubble sort\n  choice: sorts an array in ascending order using insertion sort\n  choice: sorts an array in ascending order using merge sort\n\nEnglish language description:", "targets": ["sorts an array in ascending order using insertion sort"], "multiple_choice_targets": ["sorts an array in descending order using selection sort", "sorts an array in ascending order using bubble sort", "sorts an array in ascending order using insertion sort", "sorts an array in ascending order using merge sort"]}, {"inputs": "Python code:\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n  choice: searches for an element in an array using linear search\n  choice: searches for an element in an array using binary search\n  choice: sorts an array in ascending order using bubble sort\n  choice: sorts an array in descending order using merge sort\n\nEnglish language description:", "targets": ["searches for an element in an array using linear search"], "multiple_choice_targets": ["searches for an element in an array using linear search", "searches for an element in an array using binary search", "sorts an array in ascending order using bubble sort", "sorts an array in descending order using merge sort"]}, {"inputs": "Python code:\ndef selection_sort(arr):\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n  choice: sorts an array in descending order using selection sort\n  choice: sorts an array in ascending order using bubble sort\n  choice: sorts an array in ascending order using insertion sort\n  choice: sorts an array in ascending order using selection sort\n\nEnglish language description:", "targets": ["sorts an array in ascending order using selection sort"], "multiple_choice_targets": ["sorts an array in descending order using selection sort", "sorts an array in ascending order using bubble sort", "sorts an array in ascending order using insertion sort", "sorts an array in ascending order using selection sort"]}, {"inputs": "Python code:\ndef power(base, exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\n\n  choice: calculates the factorial of a number\n  choice: calculates the power of a number\n  choice: checks if a number is even or odd\n  choice: prints 'Incorrect input' if n is negative\n\nEnglish language description:", "targets": ["calculates the power of a number"], "multiple_choice_targets": ["prints the nth number in the Fibonacci sequence", "calculates the power of a number", "checks if a number is even or odd", "prints 'Incorrect input' if n is negative"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\nprint(reverse_string(\"hello\"))\n\n  choice: prints the input string in reverse order\n  choice: prints the length of the input string\n  choice: prints the input string with all vowels removed\n  choice: prints the input string with all consonants removed\n\nEnglish language description:", "targets": ["prints the input string in reverse order"], "multiple_choice_targets": ["prints the input string in reverse order", "prints the length of the input string", "prints the input string with all vowels removed", "prints the input string with all consonants removed"]}, {"inputs": "Python code:\ndef is_palindrome(s):\n    return s == s[::-1]\nprint(is_palindrome(\"racecar\"))\n\n  choice: checks if the input string is a palindrome and prints True or False\n  choice: checks if the input string contains only letters and prints True or False\n  choice: checks if the input string is a number and prints True or False\n  choice: checks if the input string is empty and prints True or False\n\nEnglish language description:", "targets": ["checks if the input string is a palindrome and prints True or False"], "multiple_choice_targets": ["checks if the input string is a palindrome and prints True or False", "checks if the input string contains only letters and prints True or False", "checks if the input string is a number and prints True or False", "checks if the input string is empty and prints True or False"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\nprint(remove_duplicates([1,2,3,3,4,5,5]))\n\n  choice: removes all even numbers from the input list\n  choice: removes all odd numbers from the input list\n  choice: removes all duplicates from the input list\n  choice: sorts the input list in ascending order\n\nEnglish language description:", "targets": ["removes all duplicates from the input list"], "multiple_choice_targets": ["removes all even numbers from the input list", "removes all odd numbers from the input list", "removes all duplicates from the input list", "sorts the input list in ascending order"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\nprint(is_prime(17))\n\n  choice: checks if the input number is even and prints True or False\n  choice: checks if the input number is odd and prints True or False\n  choice: checks if the input number is a prime number and prints True or False\n  choice: checks if the input number is a perfect square and prints True or False\n\nEnglish language description:", "targets": ["checks if the input number is a prime number and prints True or False"], "multiple_choice_targets": ["checks if the input number is even and prints True or False", "checks if the input number is odd and prints True or False", "checks if the input number is a prime number and prints True or False", "checks if the input number is a perfect square and prints True or False"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\nprint(fibonacci(6))\n\n  choice: prints the sum of all even numbers from 0 to n\n  choice: prints the sum of all odd numbers from 0 to n\n  choice: prints the nth number in the Fibonacci sequence\n  choice: prints the factorial of n\n\nEnglish language description:", "targets": ["prints the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["prints the sum of all even numbers from 0 to n", "prints the sum of all odd numbers from 0 to n", "prints the nth number in the Fibonacci sequence", "prints the factorial of n"]}, {"inputs": "Python code:\ndef bubble_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1] :\n                lst[j], lst[j+1] = lst[j+1], lst[j]\nprint(bubble_sort([5,3,8,6,7,2]))\n\n  choice: sorts the input list in ascending order using the bubble sort algorithm\n  choice: sorts the input list in descending order using the bubble sort algorithm\n  choice: removes all duplicates from the input list\n  choice: reverses the input list\n\nEnglish language description:", "targets": ["sorts the input list in ascending order using the bubble sort algorithm"], "multiple_choice_targets": ["sorts the input list in ascending order using the bubble sort algorithm", "sorts the input list in descending order using the bubble sort algorithm", "removes all duplicates from the input list", "reverses the input list"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        return \"Incorrect input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(7))\n\n  choice: returns the nth number in the Fibonacci sequence\n  choice: returns the sum of the first n numbers in the Fibonacci sequence\n  choice: returns the product of the first n numbers in the Fibonacci sequence\n  choice: returns the average of the first n numbers in the Fibonacci sequence\n\nEnglish language description:", "targets": ["returns the nth number in the Fibonacci sequence"], "multiple_choice_targets": ["returns the nth number in the Fibonacci sequence", "returns the sum of the first n numbers in the Fibonacci sequence", "returns the product of the first n numbers in the Fibonacci sequence", "returns the average of the first n numbers in the Fibonacci sequence"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    return s[::-1]\nprint(reverse_string(\"hello\"))\n\n  choice: prints the length of the input string\n  choice: prints the input string in reverse order\n  choice: prints the input string with all vowels removed\n  choice: prints the input string with all consonants removed\n\nEnglish language description:", "targets": ["prints the input string in reverse order"], "multiple_choice_targets": ["prints the length of the input string", "prints the input string in reverse order", "prints the input string with all vowels removed", "prints the input string with all consonants removed"]}, {"inputs": "Python code:\ndef count_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\nprint(count_vowels(\"hello\"))\n\n  choice: prints the number of consonants in the input string\n  choice: prints the number of vowels in the input string\n  choice: prints the input string with all vowels removed\n  choice: prints the input string with all consonants removed\n\nEnglish language description:", "targets": ["prints the number of vowels in the input string"], "multiple_choice_targets": ["prints the number of consonants in the input string", "prints the number of vowels in the input string", "prints the input string with all vowels removed", "prints the input string with all consonants removed"]}, {"inputs": "Python code:\ndef remove_duplicates(lst):\n    return list(set(lst))\nprint(remove_duplicates([1,2,3,3,4,5,5]))\n\n  choice: removes all even numbers from the input list\n  choice: removes all odd numbers from the input list\n  choice: removes all duplicates from the input list\n  choice: sorts the input list in ascending order\n\nEnglish language description:", "targets": ["removes all duplicates from the input list"], "multiple_choice_targets": ["removes all even numbers from the input list", "removes all odd numbers from the input list", "removes all duplicates from the input list", "sorts the input list in ascending order"]}, {"inputs": "Python code:\ndef find_max(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\nprint(find_max([1,2,3,4,5]))\n\n  choice: returns the sum of all numbers in the input list\n  choice: returns the average of all numbers in the input list\n  choice: returns the maximum number in the input list\n  choice: returns the minimum number in the input list\n\nEnglish language description:", "targets": ["returns the maximum number in the input list"], "multiple_choice_targets": ["returns the sum of all numbers in the input list", "returns the average of all numbers in the input list", "returns the maximum number in the input list", "returns the minimum number in the input list"]}, {"inputs": "Python code:\ndef bubble_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\nprint(bubble_sort([3,2,1,4,5]))\n\n  choice: sorts the input list in ascending order using the bubble sort algorithm\n  choice: sorts the input list in descending order using the bubble sort algorithm\n  choice: removes all duplicates from the input list\n  choice: returns the maximum number in the input list\n\nEnglish language description:", "targets": ["sorts the input list in ascending order using the bubble sort algorithm"], "multiple_choice_targets": ["sorts the input list in ascending order using the bubble sort algorithm", "sorts the input list in descending order using the bubble sort algorithm", "removes all duplicates from the input list", "returns the maximum number in the input list"]}, {"inputs": "Python code:\ndef reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string('hello'))\n\n  choice: prints the input string in reverse order\n  choice: prints the input string with all vowels removed\n  choice: prints the input string with all consonants removed\n  choice: prints the number of characters in the input string\n\nEnglish language description:", "targets": ["prints the input string in reverse order"], "multiple_choice_targets": ["prints the input string in reverse order", "prints the input string with all vowels removed", "prints the input string with all consonants removed", "prints the number of characters in the input string"]}, {"inputs": "Python code:\ndef is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome('racecar'))\n\n  choice: checks if the input string is a palindrome and prints True or False\n  choice: prints the input string in reverse order\n  choice: prints the input string with all vowels removed\n  choice: prints the input string with all consonants removed\n\nEnglish language description:", "targets": ["checks if the input string is a palindrome and prints True or False"], "multiple_choice_targets": ["checks if the input string is a palindrome and prints True or False", "prints the input string in reverse order", "prints the input string with all vowels removed", "prints the input string with all consonants removed"]}, {"inputs": "Python code:\ndef remove_duplicates(s):\n    return ''.join(sorted(set(s), key=s.index))\n\nprint(remove_duplicates('hello'))\n\n  choice: removes all duplicate characters from the input string\n  choice: sorts the input string in alphabetical order\n  choice: reverses the input string\n  choice: counts the number of characters in the input string\n\nEnglish language description:", "targets": ["removes all duplicate characters from the input string"], "multiple_choice_targets": ["removes all duplicate characters from the input string", "sorts the input string in alphabetical order", "reverses the input string", "counts the number of characters in the input string"]}, {"inputs": "Python code:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))\n\n  choice: checks if the input number is prime and prints True or False\n  choice: prints the input number squared\n  choice: prints the input number cubed\n  choice: prints the sum of all numbers up to the input number\n\nEnglish language description:", "targets": ["checks if the input number is prime and prints True or False"], "multiple_choice_targets": ["checks if the input number is prime and prints True or False", "prints the input number squared", "prints the input number cubed", "prints the sum of all numbers up to the input number"]}, {"inputs": "Python code:\ndef fibonacci(n):\n    if n <= 0:\n        print('Incorrect input')\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))\n\n  choice: prints the nth Fibonacci number\n  choice: prints the sum of all numbers up to the input number\n  choice: checks if the input number is prime and prints True or False\n  choice: prints the input number squared\n\nEnglish language description:", "targets": ["prints the nth Fibonacci number"], "multiple_choice_targets": ["prints the nth Fibonacci number", "prints the sum of all numbers up to the input number", "checks if the input number is prime and prints True or False", "prints the input number squared"]}, {"inputs": "Python code:\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n\narr = [2, 3, 4, 10, 40]\nx = 10\n\nprint(binary_search(arr, x))\n\n  choice: searches for a given element in a sorted array using binary search and returns its index\n  choice: sorts the input array in ascending order\n  choice: reverses the input array\n  choice: counts the number of elements in the input array\n\nEnglish language description:", "targets": ["searches for a given element in a sorted array using binary search and returns its index"], "multiple_choice_targets": ["searches for a given element in a sorted array using binary search and returns its index", "sorts the input array in ascending order", "reverses the input array", "counts the number of elements in the input array"]}]